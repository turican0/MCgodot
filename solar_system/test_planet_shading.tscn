[gd_scene load_steps=8 format=3 uid="uid://drwudkqcpqr7u"]

[ext_resource type="Material" uid="uid://cp754ky7maqj2" path="res://solar_system/materials/planet_material_grassy.tres" id="1"]
[ext_resource type="VoxelGeneratorGraph" uid="uid://b4umpxnew5cgx" path="res://solar_system/voxel_graph_planet_v4.tres" id="4"]

[sub_resource type="VoxelMesherTransvoxel" id="1"]

[sub_resource type="Environment" id="2"]
background_mode = 1
background_color = Color(0.129412, 0.14902, 0.211765, 1)
ambient_light_color = Color(0.176471, 0.176471, 0.176471, 1)
ambient_light_sky_contribution = 0.99

[sub_resource type="Shader" id="3"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMAL_MAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id="4"]
render_priority = 0
shader = SubResource("3")
shader_parameter/albedo = null
shader_parameter/metallic = null
shader_parameter/normal_scale = null
shader_parameter/point_size = null
shader_parameter/roughness = null
shader_parameter/specular = null
shader_parameter/uv1_blend_sharpness = null
shader_parameter/uv1_offset = null
shader_parameter/uv1_scale = null
shader_parameter/uv2_offset = null
shader_parameter/uv2_scale = null

[sub_resource type="SphereMesh" id="5"]
radius = 200.0
height = 400.0

[node name="Node" type="Node"]

[node name="Planet" type="VoxelLodTerrain" parent="."]
generator = ExtResource("4")
mesher = SubResource("1")
view_distance = 2048
voxel_bounds = AABB(-2048, -2048, -2048, 4096, 4096, 4096)
lod_count = 7
material = ExtResource("1")

[node name="DirectionalLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.719679, 0.694307, 0, -0.694307, 0.719679, 0, 538.943, 0)
shadow_enabled = true
directional_shadow_max_distance = 2000.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("2")

[node name="Spatial" type="Position3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1024, 31.31, 0)

[node name="MeshInstance" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 739.203)
visible = false
material_override = SubResource("4")
mesh = SubResource("5")
