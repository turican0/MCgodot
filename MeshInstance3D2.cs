using Godot;
using System;
using System.Reflection;
using static MeshInstance3D2;
using System.Runtime.InteropServices;
using System.Reflection.Metadata.Ecma335;
using System.Linq;
using static Godot.TextServer;

[Tool]
public partial class MeshInstance3D2 : MeshInstance3D
{
    // Called when the node enters the scene tree for the first time.
    public bool update = false;

    [Export] public float minColorHeight = -1f, maxColorHeight = 10f;
    [Export]
    Color[] heightsColors = {
        new  Color(0.1f, 0.1f, 1f),//on inspector change colors: ocean dark blue to montain white snow
        new  Color(0.1f, 0.9f, 0.1f),
        new  Color(05f, 0.4f, 0.1f),
        new  Color(0.8f, 0.8f, 0.8f),
        new  Color(0.8f, 0.8f, 0.8f),
        new  Color(0.8f, 0.8f, 0.8f),
        new  Color(0.8f, 0.8f, 0.8f),
        new  Color(0.8f, 0.8f, 0.8f),
        new  Color(0.8f, 0.8f, 0.8f),
        new  Color(0.8f, 0.8f, 0.8f),
    };

    public struct baxis_2d
    {
        public byte x;
        public byte y;
    }

    public struct axis_2du
    {
        public int x;
        public int y;
    }

    [StructLayout(LayoutKind.Explicit)]
    public struct uaxis_2d
    {
        [FieldOffset(0)]
        public baxis_2d _axis_2d;
        [FieldOffset(0)]
        public ushort word;
    }

    struct type_E9C38_smalltit
    {
        public int x_0;
        public int alt_4;
        public int alt2_8;
        public int y_12;
        public int pnt1_16;
        public int pnt2_20;
        public int pnt3_24;
        public int pnt4_28;
        public int pnt5_32;
        public short haveBillboard_36;
        public ushort triangleFeatures_38;
        public sbyte var_40;
        public byte textIndex_41;
        public sbyte textUV_42;
        public bool textAtyp_43;
    };

    uint[] sin_90B4C = new uint[(256 + 256 + 256 + 256) * 2] {
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB,0x0000FFFD,0x0000FFFF,0x00010000,
0x00010000,0x00010000,0x0000FFFF,0x0000FFFD,
0x0000FFFB,0x0000FFF8,0x0000FFF5,0x0000FFF1,
0x0000FFEC,0x0000FFE7,0x0000FFE1,0x0000FFDB,
0x0000FFD4,0x0000FFCC,0x0000FFC4,0x0000FFBB,
0x0000FFB1,0x0000FFA7,0x0000FF9C,0x0000FF91,
0x0000FF85,0x0000FF78,0x0000FF6B,0x0000FF5D,
0x0000FF4E,0x0000FF3F,0x0000FF30,0x0000FF1F,
0x0000FF0E,0x0000FEFD,0x0000FEEB,0x0000FED8,
0x0000FEC4,0x0000FEB0,0x0000FE9C,0x0000FE87,
0x0000FE71,0x0000FE5A,0x0000FE43,0x0000FE2B,
0x0000FE13,0x0000FDFA,0x0000FDE1,0x0000FDC7,
0x0000FDAC,0x0000FD90,0x0000FD74,0x0000FD58,
0x0000FD3B,0x0000FD1D,0x0000FCFE,0x0000FCDF,
0x0000FCC0,0x0000FCA0,0x0000FC7F,0x0000FC5D,
0x0000FC3B,0x0000FC18,0x0000FBF5,0x0000FBD1,
0x0000FBAD,0x0000FB88,0x0000FB62,0x0000FB3C,
0x0000FB15,0x0000FAED,0x0000FAC5,0x0000FA9C,
0x0000FA73,0x0000FA49,0x0000FA1F,0x0000F9F3,
0x0000F9C8,0x0000F99B,0x0000F96E,0x0000F941,
0x0000F913,0x0000F8E4,0x0000F8B4,0x0000F885,
0x0000F854,0x0000F823,0x0000F7F1,0x0000F7BF,
0x0000F78C,0x0000F758,0x0000F724,0x0000F6EF,
0x0000F6BA,0x0000F684,0x0000F64E,0x0000F616,
0x0000F5DF,0x0000F5A6,0x0000F56E,0x0000F534,
0x0000F4FA,0x0000F4BF,0x0000F484,0x0000F448,
0x0000F40C,0x0000F3CF,0x0000F391,0x0000F353,
0x0000F314,0x0000F2D5,0x0000F295,0x0000F254,
0x0000F213,0x0000F1D2,0x0000F18F,0x0000F14C,
0x0000F109,0x0000F0C5,0x0000F080,0x0000F03B,
0x0000EFF5,0x0000EFAF,0x0000EF68,0x0000EF21,
0x0000EED9,0x0000EE90,0x0000EE47,0x0000EDFD,
0x0000EDB3,0x0000ED68,0x0000ED1C,0x0000ECD0,
0x0000EC83,0x0000EC36,0x0000EBE8,0x0000EB9A,
0x0000EB4B,0x0000EAFC,0x0000EAAB,0x0000EA5B,
0x0000EA0A,0x0000E9B8,0x0000E966,0x0000E913,
0x0000E8BF,0x0000E86B,0x0000E817,0x0000E7C2,
0x0000E76C,0x0000E716,0x0000E6BF,0x0000E667,
0x0000E610,0x0000E5B7,0x0000E55E,0x0000E504,
0x0000E4AA,0x0000E450,0x0000E3F4,0x0000E399,
0x0000E33C,0x0000E2DF,0x0000E282,0x0000E224,
0x0000E1C6,0x0000E167,0x0000E107,0x0000E0A7,
0x0000E046,0x0000DFE5,0x0000DF83,0x0000DF21,
0x0000DEBE,0x0000DE5B,0x0000DDF7,0x0000DD92,
0x0000DD2D,0x0000DCC8,0x0000DC62,0x0000DBFB,
0x0000DB94,0x0000DB2C,0x0000DAC4,0x0000DA5C,
0x0000D9F2,0x0000D989,0x0000D91E,0x0000D8B4,
0x0000D848,0x0000D7DC,0x0000D770,0x0000D703,
0x0000D696,0x0000D628,0x0000D5BA,0x0000D54B,
0x0000D4DB,0x0000D46B,0x0000D3FB,0x0000D38A,
0x0000D318,0x0000D2A6,0x0000D234,0x0000D1C1,
0x0000D14D,0x0000D0D9,0x0000D065,0x0000CFF0,
0x0000CF7A,0x0000CF04,0x0000CE8E,0x0000CE17,
0x0000CD9F,0x0000CD27,0x0000CCAE,0x0000CC35,
0x0000CBBC,0x0000CB42,0x0000CAC7,0x0000CA4D,
0x0000C9D1,0x0000C955,0x0000C8D9,0x0000C85C,
0x0000C7DE,0x0000C761,0x0000C6E2,0x0000C663,
0x0000C5E4,0x0000C564,0x0000C4E4,0x0000C463,
0x0000C3E2,0x0000C360,0x0000C2DE,0x0000C25C,
0x0000C1D8,0x0000C155,0x0000C0D1,0x0000C04C,
0x0000BFC7,0x0000BF42,0x0000BEBC,0x0000BE36,
0x0000BDAF,0x0000BD28,0x0000BCA0,0x0000BC18,
0x0000BB8F,0x0000BB06,0x0000BA7D,0x0000B9F3,
0x0000B968,0x0000B8DD,0x0000B852,0x0000B7C6,
0x0000B73A,0x0000B6AD,0x0000B620,0x0000B593,
0x0000B505,0x0000B477,0x0000B3E8,0x0000B358,
0x0000B2C9,0x0000B239,0x0000B1A8,0x0000B117,
0x0000B086,0x0000AFF4,0x0000AF62,0x0000AECF,
0x0000AE3C,0x0000ADA8,0x0000AD14,0x0000AC80,
0x0000ABEB,0x0000AB56,0x0000AAC1,0x0000AA2A,
0x0000A994,0x0000A8FD,0x0000A866,0x0000A7CE,
0x0000A736,0x0000A69E,0x0000A605,0x0000A56C,
0x0000A4D2,0x0000A438,0x0000A39E,0x0000A303,
0x0000A268,0x0000A1CC,0x0000A130,0x0000A094,
0x00009FF7,0x00009F5A,0x00009EBC,0x00009E1E,
0x00009D80,0x00009CE1,0x00009C42,0x00009BA3,
0x00009B03,0x00009A63,0x000099C2,0x00009921,
0x00009880,0x000097DE,0x0000973C,0x0000969A,
0x000095F7,0x00009554,0x000094B0,0x0000940C,
0x00009368,0x000092C4,0x0000921F,0x00009179,
0x000090D4,0x0000902E,0x00008F88,0x00008EE1,
0x00008E3A,0x00008D93,0x00008CEB,0x00008C43,
0x00008B9A,0x00008AF2,0x00008A49,0x0000899F,
0x000088F6,0x0000884C,0x000087A1,0x000086F7,
0x0000864C,0x000085A0,0x000084F5,0x00008449,
0x0000839C,0x000082F0,0x00008243,0x00008195,
0x000080E8,0x0000803A,0x00007F8C,0x00007EDD,
0x00007E2F,0x00007D7F,0x00007CD0,0x00007C20,
0x00007B70,0x00007AC0,0x00007A10,0x0000795F,
0x000078AD,0x000077FC,0x0000774A,0x00007698,
0x000075E6,0x00007533,0x00007480,0x000073CD,
0x0000731A,0x00007266,0x000071B2,0x000070FE,
0x00007049,0x00006F94,0x00006EDF,0x00006E2A,
0x00006D74,0x00006CBE,0x00006C08,0x00006B52,
0x00006A9B,0x000069E4,0x0000692D,0x00006876,
0x000067BE,0x00006706,0x0000664E,0x00006595,
0x000064DD,0x00006424,0x0000636B,0x000062B1,
0x000061F8,0x0000613E,0x00006084,0x00005FC9,
0x00005F0F,0x00005E54,0x00005D99,0x00005CDE,
0x00005C22,0x00005B66,0x00005AAA,0x000059EE,
0x00005932,0x00005875,0x000057B9,0x000056FC,
0x0000563E,0x00005581,0x000054C3,0x00005406,
0x00005348,0x00005289,0x000051CB,0x0000510C,
0x0000504D,0x00004F8E,0x00004ECF,0x00004E10,
0x00004D50,0x00004C90,0x00004BD1,0x00004B10,
0x00004A50,0x00004990,0x000048CF,0x0000480E,
0x0000474D,0x0000468C,0x000045CB,0x00004509,
0x00004447,0x00004385,0x000042C3,0x00004201,
0x0000413F,0x0000407C,0x00003FBA,0x00003EF7,
0x00003E34,0x00003D71,0x00003CAE,0x00003BEA,
0x00003B27,0x00003A63,0x0000399F,0x000038DB,
0x00003817,0x00003753,0x0000368E,0x000035CA,
0x00003505,0x00003440,0x0000337C,0x000032B7,
0x000031F1,0x0000312C,0x00003067,0x00002FA1,
0x00002EDC,0x00002E16,0x00002D50,0x00002C8A,
0x00002BC4,0x00002AFE,0x00002A38,0x00002971,
0x000028AB,0x000027E4,0x0000271E,0x00002657,
0x00002590,0x000024C9,0x00002402,0x0000233B,
0x00002274,0x000021AD,0x000020E5,0x0000201E,
0x00001F56,0x00001E8F,0x00001DC7,0x00001CFF,
0x00001C38,0x00001B70,0x00001AA8,0x000019E0,
0x00001918,0x00001850,0x00001787,0x000016BF,
0x000015F7,0x0000152E,0x00001466,0x0000139E,
0x000012D5,0x0000120D,0x00001144,0x0000107B,
0x00000FB3,0x00000EEA,0x00000E21,0x00000D59,
0x00000C90,0x00000BC7,0x00000AFE,0x00000A35,
0x0000096C,0x000008A3,0x000007DA,0x00000711,
0x00000648,0x0000057F,0x000004B6,0x000003ED,
0x00000324, 0x0000025B, 0x00000192, 0x000000C9,

0x00000000,0xFFFFFF37,0xFFFFFE6E,0xFFFFFDA5,
0xFFFFFCDC,0xFFFFFC13,0xFFFFFB4A,0xFFFFFA81,
0xFFFFF9B8,0xFFFFF8EF,0xFFFFF826,0xFFFFF75D,
0xFFFFF694,0xFFFFF5CB,0xFFFFF502,0xFFFFF439,
0xFFFFF370,0xFFFFF2A7,0xFFFFF1DF,0xFFFFF116,
0xFFFFF04D,0xFFFFEF85,0xFFFFEEBC,0xFFFFEDF3,
0xFFFFED2B,0xFFFFEC62,0xFFFFEB9A,0xFFFFEAD2,
0xFFFFEA09,0xFFFFE941,0xFFFFE879,0xFFFFE7B0,
0xFFFFE6E8,0xFFFFE620,0xFFFFE558,0xFFFFE490,
0xFFFFE3C8,0xFFFFE301,0xFFFFE239,0xFFFFE171,
0xFFFFE0AA,0xFFFFDFE2,0xFFFFDF1B,0xFFFFDE53,
0xFFFFDD8C,0xFFFFDCC5,0xFFFFDBFE,0xFFFFDB37,
0xFFFFDA70,0xFFFFD9A9,0xFFFFD8E2,0xFFFFD81C,
0xFFFFD755,0xFFFFD68F,0xFFFFD5C8,0xFFFFD502,
0xFFFFD43C,0xFFFFD376,0xFFFFD2B0,0xFFFFD1EA,
0xFFFFD124,0xFFFFD05F,0xFFFFCF99,0xFFFFCED4,
0xFFFFCE0F,0xFFFFCD49,0xFFFFCC84,0xFFFFCBC0,
0xFFFFCAFB,0xFFFFCA36,0xFFFFC972,0xFFFFC8AD,
0xFFFFC7E9,0xFFFFC725,0xFFFFC661,0xFFFFC59D,
0xFFFFC4D9,0xFFFFC416,0xFFFFC352,0xFFFFC28F,
0xFFFFC1CC,0xFFFFC109,0xFFFFC046,0xFFFFBF84,
0xFFFFBEC1,0xFFFFBDFF,0xFFFFBD3D,0xFFFFBC7B,
0xFFFFBBB9,0xFFFFBAF7,0xFFFFBA35,0xFFFFB974,
0xFFFFB8B3,0xFFFFB7F2,0xFFFFB731,0xFFFFB670,
0xFFFFB5B0,0xFFFFB4F0,0xFFFFB42F,0xFFFFB370,
0xFFFFB2B0,0xFFFFB1F0,0xFFFFB131,0xFFFFB072,
0xFFFFAFB3,0xFFFFAEF4,0xFFFFAE35,0xFFFFAD77,
0xFFFFACB8,0xFFFFABFA,0xFFFFAB3D,0xFFFFAA7F,
0xFFFFA9C2,0xFFFFA904,0xFFFFA847,0xFFFFA78B,
0xFFFFA6CE,0xFFFFA612,0xFFFFA556,0xFFFFA49A,
0xFFFFA3DE,0xFFFFA322,0xFFFFA267,0xFFFFA1AC,
0xFFFFA0F1,0xFFFFA037,0xFFFF9F7C,0xFFFF9EC2,
0xFFFF9E08,0xFFFF9D4F,0xFFFF9C95,0xFFFF9BDC,
0xFFFF9B23,0xFFFF9A6B,0xFFFF99B2,0xFFFF98FA,
0xFFFF9842,0xFFFF978A,0xFFFF96D3,0xFFFF961C,
0xFFFF9565,0xFFFF94AE,0xFFFF93F8,0xFFFF9342,
0xFFFF928C,0xFFFF91D6,0xFFFF9121,0xFFFF906C,
0xFFFF8FB7,0xFFFF8F02,0xFFFF8E4E,0xFFFF8D9A,
0xFFFF8CE6,0xFFFF8C33,0xFFFF8B80,0xFFFF8ACD,
0xFFFF8A1A,0xFFFF8968,0xFFFF88B6,0xFFFF8804,
0xFFFF8753,0xFFFF86A1,0xFFFF85F0,0xFFFF8540,
0xFFFF8490,0xFFFF83E0,0xFFFF8330,0xFFFF8281,
0xFFFF81D1,0xFFFF8123,0xFFFF8074,0xFFFF7FC6,
0xFFFF7F18,0xFFFF7E6B,0xFFFF7DBD,0xFFFF7D10,
0xFFFF7C64,0xFFFF7BB7,0xFFFF7B0B,0xFFFF7A60,
0xFFFF79B4,0xFFFF7909,0xFFFF785F,0xFFFF77B4,
0xFFFF770A,0xFFFF7661,0xFFFF75B7,0xFFFF750E,
0xFFFF7466,0xFFFF73BD,0xFFFF7315,0xFFFF726D,
0xFFFF71C6,0xFFFF711F,0xFFFF7078,0xFFFF6FD2,
0xFFFF6F2C,0xFFFF6E87,0xFFFF6DE1,0xFFFF6D3C,
0xFFFF6C98,0xFFFF6BF4,0xFFFF6B50,0xFFFF6AAC,
0xFFFF6A09,0xFFFF6966,0xFFFF68C4,0xFFFF6822,
0xFFFF6780,0xFFFF66DF,0xFFFF663E,0xFFFF659D,
0xFFFF64FD,0xFFFF645D,0xFFFF63BE,0xFFFF631F,
0xFFFF6280,0xFFFF61E2,0xFFFF6144,0xFFFF60A6,
0xFFFF6009,0xFFFF5F6C,0xFFFF5ED0,0xFFFF5E34,
0xFFFF5D98,0xFFFF5CFD,0xFFFF5C62,0xFFFF5BC8,
0xFFFF5B2E,0xFFFF5A94,0xFFFF59FB,0xFFFF5962,
0xFFFF58CA,0xFFFF5832,0xFFFF579A,0xFFFF5703,
0xFFFF566C,0xFFFF55D6,0xFFFF553F,0xFFFF54AA,
0xFFFF5415,0xFFFF5380,0xFFFF52EC,0xFFFF5258,
0xFFFF51C4,0xFFFF5131,0xFFFF509E,0xFFFF500C,
0xFFFF4F7A,0xFFFF4EE9,0xFFFF4E58,0xFFFF4DC7,
0xFFFF4D37,0xFFFF4CA8,0xFFFF4C18,0xFFFF4B89,
0xFFFF4AFB,0xFFFF4A6D,0xFFFF49E0,0xFFFF4953,
0xFFFF48C6,0xFFFF483A,0xFFFF47AE,0xFFFF4723,
0xFFFF4698,0xFFFF460D,0xFFFF4583,0xFFFF44FA,
0xFFFF4471,0xFFFF43E8,0xFFFF4360,0xFFFF42D8,
0xFFFF4251,0xFFFF41CA,0xFFFF4144,0xFFFF40BE,
0xFFFF4039,0xFFFF3FB4,0xFFFF3F2F,0xFFFF3EAB,
0xFFFF3E28,0xFFFF3DA4,0xFFFF3D22,0xFFFF3CA0,
0xFFFF3C1E,0xFFFF3B9D,0xFFFF3B1C,0xFFFF3A9C,
0xFFFF3A1C,0xFFFF399D,0xFFFF391E,0xFFFF389F,
0xFFFF3822,0xFFFF37A4,0xFFFF3727,0xFFFF36AB,
0xFFFF362F,0xFFFF35B3,0xFFFF3539,0xFFFF34BE,
0xFFFF3444,0xFFFF33CB,0xFFFF3352,0xFFFF32D9,
0xFFFF3261,0xFFFF31E9,0xFFFF3172,0xFFFF30FC,
0xFFFF3086,0xFFFF3010,0xFFFF2F9B,0xFFFF2F27,
0xFFFF2EB3,0xFFFF2E3F,0xFFFF2DCC,0xFFFF2D5A,
0xFFFF2CE8,0xFFFF2C76,0xFFFF2C05,0xFFFF2B95,
0xFFFF2B25,0xFFFF2AB5,0xFFFF2A46,0xFFFF29D8,
0xFFFF296A,0xFFFF28FD,0xFFFF2890,0xFFFF2824,
0xFFFF27B8,0xFFFF274C,0xFFFF26E2,0xFFFF2677,
0xFFFF260E,0xFFFF25A4,0xFFFF253C,0xFFFF24D4,
0xFFFF246C,0xFFFF2405,0xFFFF239E,0xFFFF2338,
0xFFFF22D3,0xFFFF226E,0xFFFF2209,0xFFFF21A5,
0xFFFF2142,0xFFFF20DF,0xFFFF207D,0xFFFF201B,
0xFFFF1FBA,0xFFFF1F59,0xFFFF1EF9,0xFFFF1E99,
0xFFFF1E3A,0xFFFF1DDC,0xFFFF1D7E,0xFFFF1D21,
0xFFFF1CC4,0xFFFF1C67,0xFFFF1C0C,0xFFFF1BB0,
0xFFFF1B56,0xFFFF1AFC,0xFFFF1AA2,0xFFFF1A49,
0xFFFF19F0,0xFFFF1999,0xFFFF1941,0xFFFF18EA,
0xFFFF1894,0xFFFF183E,0xFFFF17E9,0xFFFF1795,
0xFFFF1741,0xFFFF16ED,0xFFFF169A,0xFFFF1648,
0xFFFF15F6,0xFFFF15A5,0xFFFF1555,0xFFFF1504,
0xFFFF14B5,0xFFFF1466,0xFFFF1418,0xFFFF13CA,
0xFFFF137D,0xFFFF1330,0xFFFF12E4,0xFFFF1298,
0xFFFF124D,0xFFFF1203,0xFFFF11B9,0xFFFF1170,
0xFFFF1127,0xFFFF10DF,0xFFFF1098,0xFFFF1051,
0xFFFF100B,0xFFFF0FC5,0xFFFF0F80,0xFFFF0F3B,
0xFFFF0EF7,0xFFFF0EB4,0xFFFF0E71,0xFFFF0E2E,
0xFFFF0DED,0xFFFF0DAC,0xFFFF0D6B,0xFFFF0D2B,
0xFFFF0CEC,0xFFFF0CAD,0xFFFF0C6F,0xFFFF0C31,
0xFFFF0BF4,0xFFFF0BB8,0xFFFF0B7C,0xFFFF0B41,
0xFFFF0B06,0xFFFF0ACC,0xFFFF0A92,0xFFFF0A5A,
0xFFFF0A21,0xFFFF09EA,0xFFFF09B2,0xFFFF097C,
0xFFFF0946,0xFFFF0911,0xFFFF08DC,0xFFFF08A8,
0xFFFF0874,0xFFFF0841,0xFFFF080F,0xFFFF07DD,
0xFFFF07AC,0xFFFF077B,0xFFFF074C,0xFFFF071C,
0xFFFF06ED,0xFFFF06BF,0xFFFF0692,0xFFFF0665,
0xFFFF0638,0xFFFF060D,0xFFFF05E1,0xFFFF05B7,
0xFFFF058D,0xFFFF0564,0xFFFF053B,0xFFFF0513,
0xFFFF04EB,0xFFFF04C4,0xFFFF049E,0xFFFF0478,
0xFFFF0453,0xFFFF042F,0xFFFF040B,0xFFFF03E8,
0xFFFF03C5,0xFFFF03A3,0xFFFF0381,0xFFFF0360,
0xFFFF0340,0xFFFF0321,0xFFFF0302,0xFFFF02E3,
0xFFFF02C5,0xFFFF02A8,0xFFFF028C,0xFFFF0270,
0xFFFF0254,0xFFFF0239,0xFFFF021F,0xFFFF0206,
0xFFFF01ED,0xFFFF01D5,0xFFFF01BD,0xFFFF01A6,
0xFFFF018F,0xFFFF0179,0xFFFF0164,0xFFFF0150,
0xFFFF013C,0xFFFF0128,0xFFFF0115,0xFFFF0103,
0xFFFF00F2,0xFFFF00E1,0xFFFF00D0,0xFFFF00C1,
0xFFFF00B2,0xFFFF00A3,0xFFFF0095,0xFFFF0088,
0xFFFF007B,0xFFFF006F,0xFFFF0064,0xFFFF0059,
0xFFFF004F,0xFFFF0045,0xFFFF003C,0xFFFF0034,
0xFFFF002C,0xFFFF0025,0xFFFF001F,0xFFFF0019,
0xFFFF0014,0xFFFF000F,0xFFFF000B,0xFFFF0008,
0xFFFF0005,0xFFFF0003,0xFFFF0001,0xFFFF0000,
0xFFFF0000,0xFFFF0000,0xFFFF0001,0xFFFF0003,
0xFFFF0005,0xFFFF0008,0xFFFF000B,0xFFFF000F,
0xFFFF0014,0xFFFF0019,0xFFFF001F,0xFFFF0025,
0xFFFF002C,0xFFFF0034,0xFFFF003C,0xFFFF0045,
0xFFFF004F,0xFFFF0059,0xFFFF0064,0xFFFF006F,
0xFFFF007B,0xFFFF0088,0xFFFF0095,0xFFFF00A3,
0xFFFF00B2,0xFFFF00C1,0xFFFF00D0,0xFFFF00E1,
0xFFFF00F2,0xFFFF0103,0xFFFF0115,0xFFFF0128,
0xFFFF013C,0xFFFF0150,0xFFFF0164,0xFFFF0179,
0xFFFF018F,0xFFFF01A6,0xFFFF01BD,0xFFFF01D5,
0xFFFF01ED,0xFFFF0206,0xFFFF021F,0xFFFF0239,
0xFFFF0254,0xFFFF0270,0xFFFF028C,0xFFFF02A8,
0xFFFF02C5,0xFFFF02E3,0xFFFF0302,0xFFFF0321,
0xFFFF0340,0xFFFF0360,0xFFFF0381,0xFFFF03A3,
0xFFFF03C5,0xFFFF03E8,0xFFFF040B,0xFFFF042F,
0xFFFF0453,0xFFFF0478,0xFFFF049E,0xFFFF04C4,
0xFFFF04EB,0xFFFF0513,0xFFFF053B,0xFFFF0564,
0xFFFF058D,0xFFFF05B7,0xFFFF05E1,0xFFFF060D,
0xFFFF0638,0xFFFF0665,0xFFFF0692,0xFFFF06BF,
0xFFFF06ED,0xFFFF071C,0xFFFF074C,0xFFFF077B,
0xFFFF07AC,0xFFFF07DD,0xFFFF080F,0xFFFF0841,
0xFFFF0874,0xFFFF08A8,0xFFFF08DC,0xFFFF0911,
0xFFFF0946,0xFFFF097C,0xFFFF09B2,0xFFFF09EA,
0xFFFF0A21,0xFFFF0A5A,0xFFFF0A92,0xFFFF0ACC,
0xFFFF0B06,0xFFFF0B41,0xFFFF0B7C,0xFFFF0BB8,
0xFFFF0BF4,0xFFFF0C31,0xFFFF0C6F,0xFFFF0CAD,
0xFFFF0CEC,0xFFFF0D2B,0xFFFF0D6B,0xFFFF0DAC,
0xFFFF0DED,0xFFFF0E2E,0xFFFF0E71,0xFFFF0EB4,
0xFFFF0EF7,0xFFFF0F3B,0xFFFF0F80,0xFFFF0FC5,
0xFFFF100B,0xFFFF1051,0xFFFF1098,0xFFFF10DF,
0xFFFF1127,0xFFFF1170,0xFFFF11B9,0xFFFF1203,
0xFFFF124D,0xFFFF1298,0xFFFF12E4,0xFFFF1330,
0xFFFF137D,0xFFFF13CA,0xFFFF1418,0xFFFF1466,
0xFFFF14B5,0xFFFF1504,0xFFFF1555,0xFFFF15A5,
0xFFFF15F6,0xFFFF1648,0xFFFF169A,0xFFFF16ED,
0xFFFF1741,0xFFFF1795,0xFFFF17E9,0xFFFF183E,
0xFFFF1894,0xFFFF18EA,0xFFFF1941,0xFFFF1999,
0xFFFF19F0,0xFFFF1A49,0xFFFF1AA2,0xFFFF1AFC,
0xFFFF1B56,0xFFFF1BB0,0xFFFF1C0C,0xFFFF1C67,
0xFFFF1CC4,0xFFFF1D21,0xFFFF1D7E,0xFFFF1DDC,
0xFFFF1E3A,0xFFFF1E99,0xFFFF1EF9,0xFFFF1F59,
0xFFFF1FBA,0xFFFF201B,0xFFFF207D,0xFFFF20DF,
0xFFFF2142,0xFFFF21A5,0xFFFF2209,0xFFFF226E,
0xFFFF22D3,0xFFFF2338,0xFFFF239E,0xFFFF2405,
0xFFFF246C,0xFFFF24D4,0xFFFF253C,0xFFFF25A4,
0xFFFF260E,0xFFFF2677,0xFFFF26E2,0xFFFF274C,
0xFFFF27B8,0xFFFF2824,0xFFFF2890,0xFFFF28FD,
0xFFFF296A,0xFFFF29D8,0xFFFF2A46,0xFFFF2AB5,
0xFFFF2B25,0xFFFF2B95,0xFFFF2C05,0xFFFF2C76,
0xFFFF2CE8,0xFFFF2D5A,0xFFFF2DCC,0xFFFF2E3F,
0xFFFF2EB3,0xFFFF2F27,0xFFFF2F9B,0xFFFF3010,
0xFFFF3086,0xFFFF30FC,0xFFFF3172,0xFFFF31E9,
0xFFFF3261,0xFFFF32D9,0xFFFF3352,0xFFFF33CB,
0xFFFF3444,0xFFFF34BE,0xFFFF3539,0xFFFF35B3,
0xFFFF362F,0xFFFF36AB,0xFFFF3727,0xFFFF37A4,
0xFFFF3822,0xFFFF389F,0xFFFF391E,0xFFFF399D,
0xFFFF3A1C,0xFFFF3A9C,0xFFFF3B1C,0xFFFF3B9D,
0xFFFF3C1E,0xFFFF3CA0,0xFFFF3D22,0xFFFF3DA4,
0xFFFF3E28,0xFFFF3EAB,0xFFFF3F2F,0xFFFF3FB4,
0xFFFF4039,0xFFFF40BE,0xFFFF4144,0xFFFF41CA,
0xFFFF4251,0xFFFF42D8,0xFFFF4360,0xFFFF43E8,
0xFFFF4471,0xFFFF44FA,0xFFFF4583,0xFFFF460D,
0xFFFF4698,0xFFFF4723,0xFFFF47AE,0xFFFF483A,
0xFFFF48C6,0xFFFF4953,0xFFFF49E0,0xFFFF4A6D,
0xFFFF4AFB,0xFFFF4B89,0xFFFF4C18,0xFFFF4CA8,
0xFFFF4D37,0xFFFF4DC7,0xFFFF4E58,0xFFFF4EE9,
0xFFFF4F7A,0xFFFF500C,0xFFFF509E,0xFFFF5131,
0xFFFF51C4,0xFFFF5258,0xFFFF52EC,0xFFFF5380,
0xFFFF5415,0xFFFF54AA,0xFFFF553F,0xFFFF55D6,
0xFFFF566C,0xFFFF5703,0xFFFF579A,0xFFFF5832,
0xFFFF58CA,0xFFFF5962,0xFFFF59FB,0xFFFF5A94,
0xFFFF5B2E,0xFFFF5BC8,0xFFFF5C62,0xFFFF5CFD,
0xFFFF5D98,0xFFFF5E34,0xFFFF5ED0,0xFFFF5F6C,
0xFFFF6009,0xFFFF60A6,0xFFFF6144,0xFFFF61E2,
0xFFFF6280,0xFFFF631F,0xFFFF63BE,0xFFFF645D,
0xFFFF64FD,0xFFFF659D,0xFFFF663E,0xFFFF66DF,
0xFFFF6780,0xFFFF6822,0xFFFF68C4,0xFFFF6966,
0xFFFF6A09,0xFFFF6AAC,0xFFFF6B50,0xFFFF6BF4,
0xFFFF6C98,0xFFFF6D3C,0xFFFF6DE1,0xFFFF6E87,
0xFFFF6F2C,0xFFFF6FD2,0xFFFF7078,0xFFFF711F,
0xFFFF71C6,0xFFFF726D,0xFFFF7315,0xFFFF73BD,
0xFFFF7466,0xFFFF750E,0xFFFF75B7,0xFFFF7661,
0xFFFF770A,0xFFFF77B4,0xFFFF785F,0xFFFF7909,
0xFFFF79B4,0xFFFF7A60,0xFFFF7B0B,0xFFFF7BB7,
0xFFFF7C64,0xFFFF7D10,0xFFFF7DBD,0xFFFF7E6B,
0xFFFF7F18,0xFFFF7FC6,0xFFFF8074,0xFFFF8123,
0xFFFF81D1,0xFFFF8281,0xFFFF8330,0xFFFF83E0,
0xFFFF8490,0xFFFF8540,0xFFFF85F0,0xFFFF86A1,
0xFFFF8753,0xFFFF8804,0xFFFF88B6,0xFFFF8968,
0xFFFF8A1A,0xFFFF8ACD,0xFFFF8B80,0xFFFF8C33,
0xFFFF8CE6,0xFFFF8D9A,0xFFFF8E4E,0xFFFF8F02,
0xFFFF8FB7,0xFFFF906C,0xFFFF9121,0xFFFF91D6,
0xFFFF928C,0xFFFF9342,0xFFFF93F8,0xFFFF94AE,
0xFFFF9565,0xFFFF961C,0xFFFF96D3,0xFFFF978A,
0xFFFF9842,0xFFFF98FA,0xFFFF99B2,0xFFFF9A6B,
0xFFFF9B23,0xFFFF9BDC,0xFFFF9C95,0xFFFF9D4F,
0xFFFF9E08,0xFFFF9EC2,0xFFFF9F7C,0xFFFFA037,
0xFFFFA0F1,0xFFFFA1AC,0xFFFFA267,0xFFFFA322,
0xFFFFA3DE,0xFFFFA49A,0xFFFFA556,0xFFFFA612,
0xFFFFA6CE,0xFFFFA78B,0xFFFFA847,0xFFFFA904,
0xFFFFA9C2,0xFFFFAA7F,0xFFFFAB3D,0xFFFFABFA,
0xFFFFACB8,0xFFFFAD77,0xFFFFAE35,0xFFFFAEF4,
0xFFFFAFB3,0xFFFFB072,0xFFFFB131,0xFFFFB1F0,
0xFFFFB2B0,0xFFFFB370,0xFFFFB42F,0xFFFFB4F0,
0xFFFFB5B0,0xFFFFB670,0xFFFFB731,0xFFFFB7F2,
0xFFFFB8B3,0xFFFFB974,0xFFFFBA35,0xFFFFBAF7,
0xFFFFBBB9,0xFFFFBC7B,0xFFFFBD3D,0xFFFFBDFF,
0xFFFFBEC1,0xFFFFBF84,0xFFFFC046,0xFFFFC109,
0xFFFFC1CC,0xFFFFC28F,0xFFFFC352,0xFFFFC416,
0xFFFFC4D9,0xFFFFC59D,0xFFFFC661,0xFFFFC725,
0xFFFFC7E9,0xFFFFC8AD,0xFFFFC972,0xFFFFCA36,
0xFFFFCAFB,0xFFFFCBC0,0xFFFFCC84,0xFFFFCD49,
0xFFFFCE0F,0xFFFFCED4,0xFFFFCF99,0xFFFFD05F,
0xFFFFD124,0xFFFFD1EA,0xFFFFD2B0,0xFFFFD376,
0xFFFFD43C,0xFFFFD502,0xFFFFD5C8,0xFFFFD68F,
0xFFFFD755,0xFFFFD81C,0xFFFFD8E2,0xFFFFD9A9,
0xFFFFDA70,0xFFFFDB37,0xFFFFDBFE,0xFFFFDCC5,
0xFFFFDD8C,0xFFFFDE53,0xFFFFDF1B,0xFFFFDFE2,
0xFFFFE0AA,0xFFFFE171,0xFFFFE239,0xFFFFE301,
0xFFFFE3C8,0xFFFFE490,0xFFFFE558,0xFFFFE620,
0xFFFFE6E8,0xFFFFE7B0,0xFFFFE879,0xFFFFE941,
0xFFFFEA09,0xFFFFEAD2,0xFFFFEB9A,0xFFFFEC62,
0xFFFFED2B,0xFFFFEDF3,0xFFFFEEBC,0xFFFFEF85,
0xFFFFF04D,0xFFFFF116,0xFFFFF1DF,0xFFFFF2A7,
0xFFFFF370,0xFFFFF439,0xFFFFF502,0xFFFFF5CB,
0xFFFFF694,0xFFFFF75D,0xFFFFF826,0xFFFFF8EF,
0xFFFFF9B8,0xFFFFFA81,0xFFFFFB4A,0xFFFFFC13,
0xFFFFFCDC, 0xFFFFFDA5, 0xFFFFFE6E, 0xFFFFFF37 };

    uint[] cos_9134C = new uint[(256 + 256 + 256 + 256) * 2] {
0x00010000,0x00010000,0x0000FFFF,0x0000FFFD,
0x0000FFFB,0x0000FFF8,0x0000FFF5,0x0000FFF1,
0x0000FFEC,0x0000FFE7,0x0000FFE1,0x0000FFDB,
0x0000FFD4,0x0000FFCC,0x0000FFC4,0x0000FFBB,
0x0000FFB1,0x0000FFA7,0x0000FF9C,0x0000FF91,
0x0000FF85,0x0000FF78,0x0000FF6B,0x0000FF5D,
0x0000FF4E,0x0000FF3F,0x0000FF30,0x0000FF1F,
0x0000FF0E,0x0000FEFD,0x0000FEEB,0x0000FED8,
0x0000FEC4,0x0000FEB0,0x0000FE9C,0x0000FE87,
0x0000FE71,0x0000FE5A,0x0000FE43,0x0000FE2B,
0x0000FE13,0x0000FDFA,0x0000FDE1,0x0000FDC7,
0x0000FDAC,0x0000FD90,0x0000FD74,0x0000FD58,
0x0000FD3B,0x0000FD1D,0x0000FCFE,0x0000FCDF,
0x0000FCC0,0x0000FCA0,0x0000FC7F,0x0000FC5D,
0x0000FC3B,0x0000FC18,0x0000FBF5,0x0000FBD1,
0x0000FBAD,0x0000FB88,0x0000FB62,0x0000FB3C,
0x0000FB15,0x0000FAED,0x0000FAC5,0x0000FA9C,
0x0000FA73,0x0000FA49,0x0000FA1F,0x0000F9F3,
0x0000F9C8,0x0000F99B,0x0000F96E,0x0000F941,
0x0000F913,0x0000F8E4,0x0000F8B4,0x0000F885,
0x0000F854,0x0000F823,0x0000F7F1,0x0000F7BF,
0x0000F78C,0x0000F758,0x0000F724,0x0000F6EF,
0x0000F6BA,0x0000F684,0x0000F64E,0x0000F616,
0x0000F5DF,0x0000F5A6,0x0000F56E,0x0000F534,
0x0000F4FA,0x0000F4BF,0x0000F484,0x0000F448,
0x0000F40C,0x0000F3CF,0x0000F391,0x0000F353,
0x0000F314,0x0000F2D5,0x0000F295,0x0000F254,
0x0000F213,0x0000F1D2,0x0000F18F,0x0000F14C,
0x0000F109,0x0000F0C5,0x0000F080,0x0000F03B,
0x0000EFF5,0x0000EFAF,0x0000EF68,0x0000EF21,
0x0000EED9,0x0000EE90,0x0000EE47,0x0000EDFD,
0x0000EDB3,0x0000ED68,0x0000ED1C,0x0000ECD0,
0x0000EC83,0x0000EC36,0x0000EBE8,0x0000EB9A,
0x0000EB4B,0x0000EAFC,0x0000EAAB,0x0000EA5B,
0x0000EA0A,0x0000E9B8,0x0000E966,0x0000E913,
0x0000E8BF,0x0000E86B,0x0000E817,0x0000E7C2,
0x0000E76C,0x0000E716,0x0000E6BF,0x0000E667,
0x0000E610,0x0000E5B7,0x0000E55E,0x0000E504,
0x0000E4AA,0x0000E450,0x0000E3F4,0x0000E399,
0x0000E33C,0x0000E2DF,0x0000E282,0x0000E224,
0x0000E1C6,0x0000E167,0x0000E107,0x0000E0A7,
0x0000E046,0x0000DFE5,0x0000DF83,0x0000DF21,
0x0000DEBE,0x0000DE5B,0x0000DDF7,0x0000DD92,
0x0000DD2D,0x0000DCC8,0x0000DC62,0x0000DBFB,
0x0000DB94,0x0000DB2C,0x0000DAC4,0x0000DA5C,
0x0000D9F2,0x0000D989,0x0000D91E,0x0000D8B4,
0x0000D848,0x0000D7DC,0x0000D770,0x0000D703,
0x0000D696,0x0000D628,0x0000D5BA,0x0000D54B,
0x0000D4DB,0x0000D46B,0x0000D3FB,0x0000D38A,
0x0000D318,0x0000D2A6,0x0000D234,0x0000D1C1,
0x0000D14D,0x0000D0D9,0x0000D065,0x0000CFF0,
0x0000CF7A,0x0000CF04,0x0000CE8E,0x0000CE17,
0x0000CD9F,0x0000CD27,0x0000CCAE,0x0000CC35,
0x0000CBBC,0x0000CB42,0x0000CAC7,0x0000CA4D,
0x0000C9D1,0x0000C955,0x0000C8D9,0x0000C85C,
0x0000C7DE,0x0000C761,0x0000C6E2,0x0000C663,
0x0000C5E4,0x0000C564,0x0000C4E4,0x0000C463,
0x0000C3E2,0x0000C360,0x0000C2DE,0x0000C25C,
0x0000C1D8,0x0000C155,0x0000C0D1,0x0000C04C,
0x0000BFC7,0x0000BF42,0x0000BEBC,0x0000BE36,
0x0000BDAF,0x0000BD28,0x0000BCA0,0x0000BC18,
0x0000BB8F,0x0000BB06,0x0000BA7D,0x0000B9F3,
0x0000B968,0x0000B8DD,0x0000B852,0x0000B7C6,
0x0000B73A,0x0000B6AD,0x0000B620,0x0000B593,
0x0000B505,0x0000B477,0x0000B3E8,0x0000B358,
0x0000B2C9,0x0000B239,0x0000B1A8,0x0000B117,
0x0000B086,0x0000AFF4,0x0000AF62,0x0000AECF,
0x0000AE3C,0x0000ADA8,0x0000AD14,0x0000AC80,
0x0000ABEB,0x0000AB56,0x0000AAC1,0x0000AA2A,
0x0000A994,0x0000A8FD,0x0000A866,0x0000A7CE,
0x0000A736,0x0000A69E,0x0000A605,0x0000A56C,
0x0000A4D2,0x0000A438,0x0000A39E,0x0000A303,
0x0000A268,0x0000A1CC,0x0000A130,0x0000A094,
0x00009FF7,0x00009F5A,0x00009EBC,0x00009E1E,
0x00009D80,0x00009CE1,0x00009C42,0x00009BA3,
0x00009B03,0x00009A63,0x000099C2,0x00009921,
0x00009880,0x000097DE,0x0000973C,0x0000969A,
0x000095F7,0x00009554,0x000094B0,0x0000940C,
0x00009368,0x000092C4,0x0000921F,0x00009179,
0x000090D4,0x0000902E,0x00008F88,0x00008EE1,
0x00008E3A,0x00008D93,0x00008CEB,0x00008C43,
0x00008B9A,0x00008AF2,0x00008A49,0x0000899F,
0x000088F6,0x0000884C,0x000087A1,0x000086F7,
0x0000864C,0x000085A0,0x000084F5,0x00008449,
0x0000839C,0x000082F0,0x00008243,0x00008195,
0x000080E8,0x0000803A,0x00007F8C,0x00007EDD,
0x00007E2F,0x00007D7F,0x00007CD0,0x00007C20,
0x00007B70,0x00007AC0,0x00007A10,0x0000795F,
0x000078AD,0x000077FC,0x0000774A,0x00007698,
0x000075E6,0x00007533,0x00007480,0x000073CD,
0x0000731A,0x00007266,0x000071B2,0x000070FE,
0x00007049,0x00006F94,0x00006EDF,0x00006E2A,
0x00006D74,0x00006CBE,0x00006C08,0x00006B52,
0x00006A9B,0x000069E4,0x0000692D,0x00006876,
0x000067BE,0x00006706,0x0000664E,0x00006595,
0x000064DD,0x00006424,0x0000636B,0x000062B1,
0x000061F8,0x0000613E,0x00006084,0x00005FC9,
0x00005F0F,0x00005E54,0x00005D99,0x00005CDE,
0x00005C22,0x00005B66,0x00005AAA,0x000059EE,
0x00005932,0x00005875,0x000057B9,0x000056FC,
0x0000563E,0x00005581,0x000054C3,0x00005406,
0x00005348,0x00005289,0x000051CB,0x0000510C,
0x0000504D,0x00004F8E,0x00004ECF,0x00004E10,
0x00004D50,0x00004C90,0x00004BD1,0x00004B10,
0x00004A50,0x00004990,0x000048CF,0x0000480E,
0x0000474D,0x0000468C,0x000045CB,0x00004509,
0x00004447,0x00004385,0x000042C3,0x00004201,
0x0000413F,0x0000407C,0x00003FBA,0x00003EF7,
0x00003E34,0x00003D71,0x00003CAE,0x00003BEA,
0x00003B27,0x00003A63,0x0000399F,0x000038DB,
0x00003817,0x00003753,0x0000368E,0x000035CA,
0x00003505,0x00003440,0x0000337C,0x000032B7,
0x000031F1,0x0000312C,0x00003067,0x00002FA1,
0x00002EDC,0x00002E16,0x00002D50,0x00002C8A,
0x00002BC4,0x00002AFE,0x00002A38,0x00002971,
0x000028AB,0x000027E4,0x0000271E,0x00002657,
0x00002590,0x000024C9,0x00002402,0x0000233B,
0x00002274,0x000021AD,0x000020E5,0x0000201E,
0x00001F56,0x00001E8F,0x00001DC7,0x00001CFF,
0x00001C38,0x00001B70,0x00001AA8,0x000019E0,
0x00001918,0x00001850,0x00001787,0x000016BF,
0x000015F7,0x0000152E,0x00001466,0x0000139E,
0x000012D5,0x0000120D,0x00001144,0x0000107B,
0x00000FB3,0x00000EEA,0x00000E21,0x00000D59,
0x00000C90,0x00000BC7,0x00000AFE,0x00000A35,
0x0000096C,0x000008A3,0x000007DA,0x00000711,
0x00000648,0x0000057F,0x000004B6,0x000003ED,
0x00000324,0x0000025B,0x00000192,0x000000C9,
0x00000000,0xFFFFFF37,0xFFFFFE6E,0xFFFFFDA5,
0xFFFFFCDC,0xFFFFFC13,0xFFFFFB4A,0xFFFFFA81,
0xFFFFF9B8,0xFFFFF8EF,0xFFFFF826,0xFFFFF75D,
0xFFFFF694,0xFFFFF5CB,0xFFFFF502,0xFFFFF439,
0xFFFFF370,0xFFFFF2A7,0xFFFFF1DF,0xFFFFF116,
0xFFFFF04D,0xFFFFEF85,0xFFFFEEBC,0xFFFFEDF3,
0xFFFFED2B,0xFFFFEC62,0xFFFFEB9A,0xFFFFEAD2,
0xFFFFEA09,0xFFFFE941,0xFFFFE879,0xFFFFE7B0,
0xFFFFE6E8,0xFFFFE620,0xFFFFE558,0xFFFFE490,
0xFFFFE3C8,0xFFFFE301,0xFFFFE239,0xFFFFE171,
0xFFFFE0AA,0xFFFFDFE2,0xFFFFDF1B,0xFFFFDE53,
0xFFFFDD8C,0xFFFFDCC5,0xFFFFDBFE,0xFFFFDB37,
0xFFFFDA70,0xFFFFD9A9,0xFFFFD8E2,0xFFFFD81C,
0xFFFFD755,0xFFFFD68F,0xFFFFD5C8,0xFFFFD502,
0xFFFFD43C,0xFFFFD376,0xFFFFD2B0,0xFFFFD1EA,
0xFFFFD124,0xFFFFD05F,0xFFFFCF99,0xFFFFCED4,
0xFFFFCE0F,0xFFFFCD49,0xFFFFCC84,0xFFFFCBC0,
0xFFFFCAFB,0xFFFFCA36,0xFFFFC972,0xFFFFC8AD,
0xFFFFC7E9,0xFFFFC725,0xFFFFC661,0xFFFFC59D,
0xFFFFC4D9,0xFFFFC416,0xFFFFC352,0xFFFFC28F,
0xFFFFC1CC,0xFFFFC109,0xFFFFC046,0xFFFFBF84,
0xFFFFBEC1,0xFFFFBDFF,0xFFFFBD3D,0xFFFFBC7B,
0xFFFFBBB9,0xFFFFBAF7,0xFFFFBA35,0xFFFFB974,
0xFFFFB8B3,0xFFFFB7F2,0xFFFFB731,0xFFFFB670,
0xFFFFB5B0,0xFFFFB4F0,0xFFFFB42F,0xFFFFB370,
0xFFFFB2B0,0xFFFFB1F0,0xFFFFB131,0xFFFFB072,
0xFFFFAFB3,0xFFFFAEF4,0xFFFFAE35,0xFFFFAD77,
0xFFFFACB8,0xFFFFABFA,0xFFFFAB3D,0xFFFFAA7F,
0xFFFFA9C2,0xFFFFA904,0xFFFFA847,0xFFFFA78B,
0xFFFFA6CE,0xFFFFA612,0xFFFFA556,0xFFFFA49A,
0xFFFFA3DE,0xFFFFA322,0xFFFFA267,0xFFFFA1AC,
0xFFFFA0F1,0xFFFFA037,0xFFFF9F7C,0xFFFF9EC2,
0xFFFF9E08,0xFFFF9D4F,0xFFFF9C95,0xFFFF9BDC,
0xFFFF9B23,0xFFFF9A6B,0xFFFF99B2,0xFFFF98FA,
0xFFFF9842,0xFFFF978A,0xFFFF96D3,0xFFFF961C,
0xFFFF9565,0xFFFF94AE,0xFFFF93F8,0xFFFF9342,
0xFFFF928C,0xFFFF91D6,0xFFFF9121,0xFFFF906C,
0xFFFF8FB7,0xFFFF8F02,0xFFFF8E4E,0xFFFF8D9A,
0xFFFF8CE6,0xFFFF8C33,0xFFFF8B80,0xFFFF8ACD,
0xFFFF8A1A,0xFFFF8968,0xFFFF88B6,0xFFFF8804,
0xFFFF8753,0xFFFF86A1,0xFFFF85F0,0xFFFF8540,
0xFFFF8490,0xFFFF83E0,0xFFFF8330,0xFFFF8281,
0xFFFF81D1,0xFFFF8123,0xFFFF8074,0xFFFF7FC6,
0xFFFF7F18,0xFFFF7E6B,0xFFFF7DBD,0xFFFF7D10,
0xFFFF7C64,0xFFFF7BB7,0xFFFF7B0B,0xFFFF7A60,
0xFFFF79B4,0xFFFF7909,0xFFFF785F,0xFFFF77B4,
0xFFFF770A,0xFFFF7661,0xFFFF75B7,0xFFFF750E,
0xFFFF7466,0xFFFF73BD,0xFFFF7315,0xFFFF726D,
0xFFFF71C6,0xFFFF711F,0xFFFF7078,0xFFFF6FD2,
0xFFFF6F2C,0xFFFF6E87,0xFFFF6DE1,0xFFFF6D3C,
0xFFFF6C98,0xFFFF6BF4,0xFFFF6B50,0xFFFF6AAC,
0xFFFF6A09,0xFFFF6966,0xFFFF68C4,0xFFFF6822,
0xFFFF6780,0xFFFF66DF,0xFFFF663E,0xFFFF659D,
0xFFFF64FD,0xFFFF645D,0xFFFF63BE,0xFFFF631F,
0xFFFF6280,0xFFFF61E2,0xFFFF6144,0xFFFF60A6,
0xFFFF6009,0xFFFF5F6C,0xFFFF5ED0,0xFFFF5E34,
0xFFFF5D98,0xFFFF5CFD,0xFFFF5C62,0xFFFF5BC8,
0xFFFF5B2E,0xFFFF5A94,0xFFFF59FB,0xFFFF5962,
0xFFFF58CA,0xFFFF5832,0xFFFF579A,0xFFFF5703,
0xFFFF566C,0xFFFF55D6,0xFFFF553F,0xFFFF54AA,
0xFFFF5415,0xFFFF5380,0xFFFF52EC,0xFFFF5258,
0xFFFF51C4,0xFFFF5131,0xFFFF509E,0xFFFF500C,
0xFFFF4F7A,0xFFFF4EE9,0xFFFF4E58,0xFFFF4DC7,
0xFFFF4D37,0xFFFF4CA8,0xFFFF4C18,0xFFFF4B89,
0xFFFF4AFB,0xFFFF4A6D,0xFFFF49E0,0xFFFF4953,
0xFFFF48C6,0xFFFF483A,0xFFFF47AE,0xFFFF4723,
0xFFFF4698,0xFFFF460D,0xFFFF4583,0xFFFF44FA,
0xFFFF4471,0xFFFF43E8,0xFFFF4360,0xFFFF42D8,
0xFFFF4251,0xFFFF41CA,0xFFFF4144,0xFFFF40BE,
0xFFFF4039,0xFFFF3FB4,0xFFFF3F2F,0xFFFF3EAB,
0xFFFF3E28,0xFFFF3DA4,0xFFFF3D22,0xFFFF3CA0,
0xFFFF3C1E,0xFFFF3B9D,0xFFFF3B1C,0xFFFF3A9C,
0xFFFF3A1C,0xFFFF399D,0xFFFF391E,0xFFFF389F,
0xFFFF3822,0xFFFF37A4,0xFFFF3727,0xFFFF36AB,
0xFFFF362F,0xFFFF35B3,0xFFFF3539,0xFFFF34BE,
0xFFFF3444,0xFFFF33CB,0xFFFF3352,0xFFFF32D9,
0xFFFF3261,0xFFFF31E9,0xFFFF3172,0xFFFF30FC,
0xFFFF3086,0xFFFF3010,0xFFFF2F9B,0xFFFF2F27,
0xFFFF2EB3,0xFFFF2E3F,0xFFFF2DCC,0xFFFF2D5A,
0xFFFF2CE8,0xFFFF2C76,0xFFFF2C05,0xFFFF2B95,
0xFFFF2B25,0xFFFF2AB5,0xFFFF2A46,0xFFFF29D8,
0xFFFF296A,0xFFFF28FD,0xFFFF2890,0xFFFF2824,
0xFFFF27B8,0xFFFF274C,0xFFFF26E2,0xFFFF2677,
0xFFFF260E,0xFFFF25A4,0xFFFF253C,0xFFFF24D4,
0xFFFF246C,0xFFFF2405,0xFFFF239E,0xFFFF2338,
0xFFFF22D3,0xFFFF226E,0xFFFF2209,0xFFFF21A5,
0xFFFF2142,0xFFFF20DF,0xFFFF207D,0xFFFF201B,
0xFFFF1FBA,0xFFFF1F59,0xFFFF1EF9,0xFFFF1E99,
0xFFFF1E3A,0xFFFF1DDC,0xFFFF1D7E,0xFFFF1D21,
0xFFFF1CC4,0xFFFF1C67,0xFFFF1C0C,0xFFFF1BB0,
0xFFFF1B56,0xFFFF1AFC,0xFFFF1AA2,0xFFFF1A49,
0xFFFF19F0,0xFFFF1999,0xFFFF1941,0xFFFF18EA,
0xFFFF1894,0xFFFF183E,0xFFFF17E9,0xFFFF1795,
0xFFFF1741,0xFFFF16ED,0xFFFF169A,0xFFFF1648,
0xFFFF15F6,0xFFFF15A5,0xFFFF1555,0xFFFF1504,
0xFFFF14B5,0xFFFF1466,0xFFFF1418,0xFFFF13CA,
0xFFFF137D,0xFFFF1330,0xFFFF12E4,0xFFFF1298,
0xFFFF124D,0xFFFF1203,0xFFFF11B9,0xFFFF1170,
0xFFFF1127,0xFFFF10DF,0xFFFF1098,0xFFFF1051,
0xFFFF100B,0xFFFF0FC5,0xFFFF0F80,0xFFFF0F3B,
0xFFFF0EF7,0xFFFF0EB4,0xFFFF0E71,0xFFFF0E2E,
0xFFFF0DED,0xFFFF0DAC,0xFFFF0D6B,0xFFFF0D2B,
0xFFFF0CEC,0xFFFF0CAD,0xFFFF0C6F,0xFFFF0C31,
0xFFFF0BF4,0xFFFF0BB8,0xFFFF0B7C,0xFFFF0B41,
0xFFFF0B06,0xFFFF0ACC,0xFFFF0A92,0xFFFF0A5A,
0xFFFF0A21,0xFFFF09EA,0xFFFF09B2,0xFFFF097C,
0xFFFF0946,0xFFFF0911,0xFFFF08DC,0xFFFF08A8,
0xFFFF0874,0xFFFF0841,0xFFFF080F,0xFFFF07DD,
0xFFFF07AC,0xFFFF077B,0xFFFF074C,0xFFFF071C,
0xFFFF06ED,0xFFFF06BF,0xFFFF0692,0xFFFF0665,
0xFFFF0638,0xFFFF060D,0xFFFF05E1,0xFFFF05B7,
0xFFFF058D,0xFFFF0564,0xFFFF053B,0xFFFF0513,
0xFFFF04EB,0xFFFF04C4,0xFFFF049E,0xFFFF0478,
0xFFFF0453,0xFFFF042F,0xFFFF040B,0xFFFF03E8,
0xFFFF03C5,0xFFFF03A3,0xFFFF0381,0xFFFF0360,
0xFFFF0340,0xFFFF0321,0xFFFF0302,0xFFFF02E3,
0xFFFF02C5,0xFFFF02A8,0xFFFF028C,0xFFFF0270,
0xFFFF0254,0xFFFF0239,0xFFFF021F,0xFFFF0206,
0xFFFF01ED,0xFFFF01D5,0xFFFF01BD,0xFFFF01A6,
0xFFFF018F,0xFFFF0179,0xFFFF0164,0xFFFF0150,
0xFFFF013C,0xFFFF0128,0xFFFF0115,0xFFFF0103,
0xFFFF00F2,0xFFFF00E1,0xFFFF00D0,0xFFFF00C1,
0xFFFF00B2,0xFFFF00A3,0xFFFF0095,0xFFFF0088,
0xFFFF007B,0xFFFF006F,0xFFFF0064,0xFFFF0059,
0xFFFF004F,0xFFFF0045,0xFFFF003C,0xFFFF0034,
0xFFFF002C,0xFFFF0025,0xFFFF001F,0xFFFF0019,
0xFFFF0014,0xFFFF000F,0xFFFF000B,0xFFFF0008,
0xFFFF0005,0xFFFF0003,0xFFFF0001,0xFFFF0000,
0xFFFF0000,0xFFFF0000,0xFFFF0001,0xFFFF0003,
0xFFFF0005,0xFFFF0008,0xFFFF000B,0xFFFF000F,
0xFFFF0014,0xFFFF0019,0xFFFF001F,0xFFFF0025,
0xFFFF002C,0xFFFF0034,0xFFFF003C,0xFFFF0045,
0xFFFF004F,0xFFFF0059,0xFFFF0064,0xFFFF006F,
0xFFFF007B,0xFFFF0088,0xFFFF0095,0xFFFF00A3,
0xFFFF00B2,0xFFFF00C1,0xFFFF00D0,0xFFFF00E1,
0xFFFF00F2,0xFFFF0103,0xFFFF0115,0xFFFF0128,
0xFFFF013C,0xFFFF0150,0xFFFF0164,0xFFFF0179,
0xFFFF018F,0xFFFF01A6,0xFFFF01BD,0xFFFF01D5,
0xFFFF01ED,0xFFFF0206,0xFFFF021F,0xFFFF0239,
0xFFFF0254,0xFFFF0270,0xFFFF028C,0xFFFF02A8,
0xFFFF02C5,0xFFFF02E3,0xFFFF0302,0xFFFF0321,
0xFFFF0340,0xFFFF0360,0xFFFF0381,0xFFFF03A3,
0xFFFF03C5,0xFFFF03E8,0xFFFF040B,0xFFFF042F,
0xFFFF0453,0xFFFF0478,0xFFFF049E,0xFFFF04C4,
0xFFFF04EB,0xFFFF0513,0xFFFF053B,0xFFFF0564,
0xFFFF058D,0xFFFF05B7,0xFFFF05E1,0xFFFF060D,
0xFFFF0638,0xFFFF0665,0xFFFF0692,0xFFFF06BF,
0xFFFF06ED,0xFFFF071C,0xFFFF074C,0xFFFF077B,
0xFFFF07AC,0xFFFF07DD,0xFFFF080F,0xFFFF0841,
0xFFFF0874,0xFFFF08A8,0xFFFF08DC,0xFFFF0911,
0xFFFF0946,0xFFFF097C,0xFFFF09B2,0xFFFF09EA,
0xFFFF0A21,0xFFFF0A5A,0xFFFF0A92,0xFFFF0ACC,
0xFFFF0B06,0xFFFF0B41,0xFFFF0B7C,0xFFFF0BB8,
0xFFFF0BF4,0xFFFF0C31,0xFFFF0C6F,0xFFFF0CAD,
0xFFFF0CEC,0xFFFF0D2B,0xFFFF0D6B,0xFFFF0DAC,
0xFFFF0DED,0xFFFF0E2E,0xFFFF0E71,0xFFFF0EB4,
0xFFFF0EF7,0xFFFF0F3B,0xFFFF0F80,0xFFFF0FC5,
0xFFFF100B,0xFFFF1051,0xFFFF1098,0xFFFF10DF,
0xFFFF1127,0xFFFF1170,0xFFFF11B9,0xFFFF1203,
0xFFFF124D,0xFFFF1298,0xFFFF12E4,0xFFFF1330,
0xFFFF137D,0xFFFF13CA,0xFFFF1418,0xFFFF1466,
0xFFFF14B5,0xFFFF1504,0xFFFF1555,0xFFFF15A5,
0xFFFF15F6,0xFFFF1648,0xFFFF169A,0xFFFF16ED,
0xFFFF1741,0xFFFF1795,0xFFFF17E9,0xFFFF183E,
0xFFFF1894,0xFFFF18EA,0xFFFF1941,0xFFFF1999,
0xFFFF19F0,0xFFFF1A49,0xFFFF1AA2,0xFFFF1AFC,
0xFFFF1B56,0xFFFF1BB0,0xFFFF1C0C,0xFFFF1C67,
0xFFFF1CC4,0xFFFF1D21,0xFFFF1D7E,0xFFFF1DDC,
0xFFFF1E3A,0xFFFF1E99,0xFFFF1EF9,0xFFFF1F59,
0xFFFF1FBA,0xFFFF201B,0xFFFF207D,0xFFFF20DF,
0xFFFF2142,0xFFFF21A5,0xFFFF2209,0xFFFF226E,
0xFFFF22D3,0xFFFF2338,0xFFFF239E,0xFFFF2405,
0xFFFF246C,0xFFFF24D4,0xFFFF253C,0xFFFF25A4,
0xFFFF260E,0xFFFF2677,0xFFFF26E2,0xFFFF274C,
0xFFFF27B8,0xFFFF2824,0xFFFF2890,0xFFFF28FD,
0xFFFF296A,0xFFFF29D8,0xFFFF2A46,0xFFFF2AB5,
0xFFFF2B25,0xFFFF2B95,0xFFFF2C05,0xFFFF2C76,
0xFFFF2CE8,0xFFFF2D5A,0xFFFF2DCC,0xFFFF2E3F,
0xFFFF2EB3,0xFFFF2F27,0xFFFF2F9B,0xFFFF3010,
0xFFFF3086,0xFFFF30FC,0xFFFF3172,0xFFFF31E9,
0xFFFF3261,0xFFFF32D9,0xFFFF3352,0xFFFF33CB,
0xFFFF3444,0xFFFF34BE,0xFFFF3539,0xFFFF35B3,
0xFFFF362F,0xFFFF36AB,0xFFFF3727,0xFFFF37A4,
0xFFFF3822,0xFFFF389F,0xFFFF391E,0xFFFF399D,
0xFFFF3A1C,0xFFFF3A9C,0xFFFF3B1C,0xFFFF3B9D,
0xFFFF3C1E,0xFFFF3CA0,0xFFFF3D22,0xFFFF3DA4,
0xFFFF3E28,0xFFFF3EAB,0xFFFF3F2F,0xFFFF3FB4,
0xFFFF4039,0xFFFF40BE,0xFFFF4144,0xFFFF41CA,
0xFFFF4251,0xFFFF42D8,0xFFFF4360,0xFFFF43E8,
0xFFFF4471,0xFFFF44FA,0xFFFF4583,0xFFFF460D,
0xFFFF4698,0xFFFF4723,0xFFFF47AE,0xFFFF483A,
0xFFFF48C6,0xFFFF4953,0xFFFF49E0,0xFFFF4A6D,
0xFFFF4AFB,0xFFFF4B89,0xFFFF4C18,0xFFFF4CA8,
0xFFFF4D37,0xFFFF4DC7,0xFFFF4E58,0xFFFF4EE9,
0xFFFF4F7A,0xFFFF500C,0xFFFF509E,0xFFFF5131,
0xFFFF51C4,0xFFFF5258,0xFFFF52EC,0xFFFF5380,
0xFFFF5415,0xFFFF54AA,0xFFFF553F,0xFFFF55D6,
0xFFFF566C,0xFFFF5703,0xFFFF579A,0xFFFF5832,
0xFFFF58CA,0xFFFF5962,0xFFFF59FB,0xFFFF5A94,
0xFFFF5B2E,0xFFFF5BC8,0xFFFF5C62,0xFFFF5CFD,
0xFFFF5D98,0xFFFF5E34,0xFFFF5ED0,0xFFFF5F6C,
0xFFFF6009,0xFFFF60A6,0xFFFF6144,0xFFFF61E2,
0xFFFF6280,0xFFFF631F,0xFFFF63BE,0xFFFF645D,
0xFFFF64FD,0xFFFF659D,0xFFFF663E,0xFFFF66DF,
0xFFFF6780,0xFFFF6822,0xFFFF68C4,0xFFFF6966,
0xFFFF6A09,0xFFFF6AAC,0xFFFF6B50,0xFFFF6BF4,
0xFFFF6C98,0xFFFF6D3C,0xFFFF6DE1,0xFFFF6E87,
0xFFFF6F2C,0xFFFF6FD2,0xFFFF7078,0xFFFF711F,
0xFFFF71C6,0xFFFF726D,0xFFFF7315,0xFFFF73BD,
0xFFFF7466,0xFFFF750E,0xFFFF75B7,0xFFFF7661,
0xFFFF770A,0xFFFF77B4,0xFFFF785F,0xFFFF7909,
0xFFFF79B4,0xFFFF7A60,0xFFFF7B0B,0xFFFF7BB7,
0xFFFF7C64,0xFFFF7D10,0xFFFF7DBD,0xFFFF7E6B,
0xFFFF7F18,0xFFFF7FC6,0xFFFF8074,0xFFFF8123,
0xFFFF81D1,0xFFFF8281,0xFFFF8330,0xFFFF83E0,
0xFFFF8490,0xFFFF8540,0xFFFF85F0,0xFFFF86A1,
0xFFFF8753,0xFFFF8804,0xFFFF88B6,0xFFFF8968,
0xFFFF8A1A,0xFFFF8ACD,0xFFFF8B80,0xFFFF8C33,
0xFFFF8CE6,0xFFFF8D9A,0xFFFF8E4E,0xFFFF8F02,
0xFFFF8FB7,0xFFFF906C,0xFFFF9121,0xFFFF91D6,
0xFFFF928C,0xFFFF9342,0xFFFF93F8,0xFFFF94AE,
0xFFFF9565,0xFFFF961C,0xFFFF96D3,0xFFFF978A,
0xFFFF9842,0xFFFF98FA,0xFFFF99B2,0xFFFF9A6B,
0xFFFF9B23,0xFFFF9BDC,0xFFFF9C95,0xFFFF9D4F,
0xFFFF9E08,0xFFFF9EC2,0xFFFF9F7C,0xFFFFA037,
0xFFFFA0F1,0xFFFFA1AC,0xFFFFA267,0xFFFFA322,
0xFFFFA3DE,0xFFFFA49A,0xFFFFA556,0xFFFFA612,
0xFFFFA6CE,0xFFFFA78B,0xFFFFA847,0xFFFFA904,
0xFFFFA9C2,0xFFFFAA7F,0xFFFFAB3D,0xFFFFABFA,
0xFFFFACB8,0xFFFFAD77,0xFFFFAE35,0xFFFFAEF4,
0xFFFFAFB3,0xFFFFB072,0xFFFFB131,0xFFFFB1F0,
0xFFFFB2B0,0xFFFFB370,0xFFFFB42F,0xFFFFB4F0,
0xFFFFB5B0,0xFFFFB670,0xFFFFB731,0xFFFFB7F2,
0xFFFFB8B3,0xFFFFB974,0xFFFFBA35,0xFFFFBAF7,
0xFFFFBBB9,0xFFFFBC7B,0xFFFFBD3D,0xFFFFBDFF,
0xFFFFBEC1,0xFFFFBF84,0xFFFFC046,0xFFFFC109,
0xFFFFC1CC,0xFFFFC28F,0xFFFFC352,0xFFFFC416,
0xFFFFC4D9,0xFFFFC59D,0xFFFFC661,0xFFFFC725,
0xFFFFC7E9,0xFFFFC8AD,0xFFFFC972,0xFFFFCA36,
0xFFFFCAFB,0xFFFFCBC0,0xFFFFCC84,0xFFFFCD49,
0xFFFFCE0F,0xFFFFCED4,0xFFFFCF99,0xFFFFD05F,
0xFFFFD124,0xFFFFD1EA,0xFFFFD2B0,0xFFFFD376,
0xFFFFD43C,0xFFFFD502,0xFFFFD5C8,0xFFFFD68F,
0xFFFFD755,0xFFFFD81C,0xFFFFD8E2,0xFFFFD9A9,
0xFFFFDA70,0xFFFFDB37,0xFFFFDBFE,0xFFFFDCC5,
0xFFFFDD8C,0xFFFFDE53,0xFFFFDF1B,0xFFFFDFE2,
0xFFFFE0AA,0xFFFFE171,0xFFFFE239,0xFFFFE301,
0xFFFFE3C8,0xFFFFE490,0xFFFFE558,0xFFFFE620,
0xFFFFE6E8,0xFFFFE7B0,0xFFFFE879,0xFFFFE941,
0xFFFFEA09,0xFFFFEAD2,0xFFFFEB9A,0xFFFFEC62,
0xFFFFED2B,0xFFFFEDF3,0xFFFFEEBC,0xFFFFEF85,
0xFFFFF04D,0xFFFFF116,0xFFFFF1DF,0xFFFFF2A7,
0xFFFFF370,0xFFFFF439,0xFFFFF502,0xFFFFF5CB,
0xFFFFF694,0xFFFFF75D,0xFFFFF826,0xFFFFF8EF,
0xFFFFF9B8,0xFFFFFA81,0xFFFFFB4A,0xFFFFFC13,
0xFFFFFCDC,0xFFFFFDA5,0xFFFFFE6E,0xFFFFFF37,
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB,0x0000FFFD,0x0000FFFF,0x00010000
};

    byte[] byte_900C4 = new byte[] {//fix 164
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,//8
0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//16
0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,//24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//32
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//48
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//64
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//80
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//96
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//112
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//128
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//144
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//160
0x00, 0x00, 0x00, 0x00};

    struct type_F2C20ar
    {
        public int dword0x00;
        public int dword0x01_rotIdx;
        //public int* dword0x02_data; //fix
        public int dword0x03_screenX;
        public int dword0x04_screenY;
        public int dword0x05;
        public int dword0x06_height;
        public int dword0x07;
        public int dword0x08_width;
        public int dword0x09_realWidth;
        public int dword0x0a_actIdx;
        public int dword0x0b;
        public int dword0x0c_realHeight;
        public int sin_0x0d;
        public int dword0x0e_ptrScreenRenderBufferStart;
        public int dword0x0f;
        public int dword0x10;
        public int cos_0x11;
        public int dword0x12;
        public int dword0x13;
        //public type_event_0x6E8E* dword0x14x;//fix
        public int dword0x15;
        public int dword0x16;
        public int dword0x17;
        public int dword0x18;
        public int Height_0x19;
        //public byte* pbyte0x1a;//fix
        public int dword0x1b;
        public int dword0x1c;
        public int dword0x1d;
        public int dword0x1e;
        public int dword0x1f;
        public int dword0x20;
        public int dword0x21;
        public int dword0x22;
        public int dword0x23;
        public int dword0x24;
        public int width0x25;
        public int height0x26;
        public int dword0x27;
    }

    struct type_x_D41A0_BYTEARRAY_4_struct
    {
        /*
        //uint8_t harddisk_number;

        //uint8_t setting_byte5_19;
        uint32_t configDatSign_0;//x_D41A0_BYTEARRAY_4_struct.dwordindex_0
        uint16_t langIndex_4;//x_D41A0_BYTEARRAY_4_struct.byteindex_4
        uint16_t soundVolume_6;//x_D41A0_BYTEARRAY_4_struct.wordindex_6
        uint16_t musicVolume_8;//x_D41A0_BYTEARRAY_4_struct.wordindex_8
        uint8_t byteindex_10;//0xa//x_D41A0_BYTEARRAY_4_struct.byteindex_10//show help
        int8_t brightness_11;//0xb//x_D41A0_BYTEARRAY_4_struct.byteindex_11
        int8_t brightness_12;//0xc//x_D41A0_BYTEARRAY_4_struct.byteindex_12
        int8_t brightness_13;//0xd//x_D41A0_BYTEARRAY_4_struct.byteindex_13
        uint16_t wordindex_14;
        uint32_t dwordindex_16;//0x10//x_D41A0_BYTEARRAY_4_struct.dwordindex_16
        uint8_t stubb[2];
        uint8_t setting_byte1_22;//x_D41A0_BYTEARRAY_4_struct.setting_byte1_22
        int8_t setting_byte2_23;//0x17//x_D41A0_BYTEARRAY_4_struct.setting_byte2_23
        uint8_t setting_byte3_24;//cheats? 0x20==free spell//x_D41A0_BYTEARRAY_4_struct.setting_byte3_24
                                 //spell on - 0x20
        uint8_t setting_byte4_25;//cheats? 0x1==Invincability 0x8==tester 0x40==music
                                 //invincability - 1;
        uint8_t byteindex_26 = 0;//x_D41A0_BYTEARRAY_4_struct.byteindex_26
        uint8_t stubc[3];
        uint8_t setting_30;//x_D41A0_BYTEARRAY_4_struct.setting_30
        uint8_t stubd[3];
        //FILE* moviemvidatfile_byte4_33;
        uint8_t m_wHighSpeedSystem;
        FILE* moviemvidatfile_byte4_35;
        uint16_t moviemvinumber_byte4_39;//x_D41A0_BYTEARRAY_4_struct.moviemvinumber_byte4_39
        uint8_t stube[2];*/
        int levelnumber_43w;//x_D41A0_BYTEARRAY_4_struct.levelnumber_43
                                 //uint8_t stubf[1];
        /*uint16_t setting_45w;
        uint8_t stubg[3];
        int8_t byteindex_50;//0x32//x_D41A0_BYTEARRAY_4_struct.byteindex_50
        uint8_t byteindex_51;//0x33//x_D41A0_BYTEARRAY_4_struct.byteindex_51
        uint8_t byteindex_52;//0x34//x_D41A0_BYTEARRAY_4_struct.byteindex_52
        uint8_t byteindex_53;//0x35//x_D41A0_BYTEARRAY_4_struct.byteindex_53
        uint8_t stubh[3];
        char player_name_57ar[32];
        char savestring_89[32];
        uint8_t byteindex_121[16];//0x79//x_D41A0_BYTEARRAY_4_struct.byteindex_121
                                  //uint8_t byteindex_122;//0x7a//x_D41A0_BYTEARRAY_4_struct.byteindex_121[1]
                                  //uint8_t byteindex_123;//0x7b//x_D41A0_BYTEARRAY_4_struct.byteindex_121[2]
                                  //uint8_t byteindex_124;//0x7c//x_D41A0_BYTEARRAY_4_struct.byteindex_121[3]
                                  //uint8_t byteindex_125;//0x7d//x_D41A0_BYTEARRAY_4_struct.byteindex_121[4]
                                  //uint8_t byteindex_127;//0x7f//x_D41A0_BYTEARRAY_4_struct.byteindex_121[6]
        uint8_t stubi[8];
        char byteindex_145ar[32];//x_D41A0_BYTEARRAY_4_struct.byteindex_145ar

        uint8_t byteindex_177;//0xb1//x_D41A0_BYTEARRAY_4_struct.byteindex_177
        uint8_t speedIndex;//0xb2//x_D41A0_BYTEARRAY_4_struct.byteindex_178
        uint8_t SelectedLangIndex;
        uint8_t byteindex_180;//0xb4//x_D41A0_BYTEARRAY_4_struct.byteindex_180
        uint8_t byteindex_181;//0xb5//x_D41A0_BYTEARRAY_4_struct.byteindex_181
        uint8_t byteindex_183;//0xb7//x_D41A0_BYTEARRAY_4_struct.byteindex_183
        uint16_t byteindex_184w;//0xb8//x_D41A0_BYTEARRAY_4_struct.byteindex_184
                                //uint8_t stubj[1];
        uint8_t byteindex_186;//0xba//x_D41A0_BYTEARRAY_4_struct.byteindex_186
        uint8_t stubk[1];
        uint32_t dwordindex_188;//x_D41A0_BYTEARRAY_4_struct.byteindex_188
                                //uint8_t byteindex_189;//x_D41A0_BYTEARRAY_4_struct.byteindex_189
                                //uint8_t byteindex_190;//x_D41A0_BYTEARRAY_4_struct.byteindex_190

        //1(0x1)-help//2(0x2)-sound//3(0x4)-music//4(0x8)-speek//5(0x10)-fly//6(0x20)-bright//7(0x40)speed//8(0x80)screen
        //9(0x100)-reflection//10(0x200)-sky//11(0x400)-shadows//12(0x800)-light/13(0x1000)-icons//14(0x2000)-transparency//15(0x4000)-flat	//16(0x8000)-resolution
        //17(0x10000)-names

        uint32_t dwordindex_192;//0xc0//x_D41A0_BYTEARRAY_4_struct.byteindex_192
                                //uint8_t byteindex_193;//0xc1//x_D41A0_BYTEARRAY_4_struct.byteindex_193
                                //uint8_t byteindex_194;//0xc2//x_D41A0_BYTEARRAY_4_struct.byteindex_194

        //1(0x1)-help//2(0x2)-sound//3(0x4)-music//4(0x8)-speek//5(0x10)-fly//6(0x20)-bright//7(0x40)speed//8(0x80)screen
        //9(0x100)-reflection//10(0x200)-sky//11(0x400)-shadows//12(0x800)-light/13(0x1000)-icons//14(0x2000)-transparency//15(0x4000)-flat	//16(0x8000)-resolution
        //17(0x10000)-names

        uint8_t byteindex_196;//0xc4//x_D41A0_BYTEARRAY_4_struct.byteindex_196
        uint8_t stubl[3];
        uint8_t transfer_rate_dwordindex_200;//0xc8//x_D41A0_BYTEARRAY_4_struct.transfer_rate_dwordindex_200
        uint8_t stubm[3];
        uint8_t byteindex_204;//0xCC//x_D41A0_BYTEARRAY_4_struct.byteindex_204
        uint8_t byteindex_205;//0xCD//x_D41A0_BYTEARRAY_4_struct.byteindex_205
        uint8_t byteindex_206;//0xce//x_D41A0_BYTEARRAY_4_struct.byteindex_206
        uint8_t byteindex_207;//0xcf//x_D41A0_BYTEARRAY_4_struct.byteindex_207
        uint8_t byteindex_208;//0xd0//x_D41A0_BYTEARRAY_4_struct.byteindex_208
        uint8_t stubmm[1];
        uint32_t byteindex_210d;//0xd2//x_D41A0_BYTEARRAY_4_struct.byteindex_210
                                //uint8_t stubn[3];
        uint16_t byteindex_214w;//0xd6//x_D41A0_BYTEARRAY_4_struct.byteindex_214
                                //uint8_t stubo[1];
        uint16_t isNetwork_216w;
        //uint8_t stubp[1];
        uint16_t byteindex_218w;//0xda//x_D41A0_BYTEARRAY_4_struct.byteindex_218
                                //uint8_t stubq[1];

        uint8_t byteindex_220;//0xdc//x_D41A0_BYTEARRAY_4_struct.byteindex_220
        uint8_t byteindex_221ar[3];//0xe0//x_D41A0_BYTEARRAY_4_struct.byteindex_221ar
        uint8_t byteindex_224;//0xe0//x_D41A0_BYTEARRAY_4_struct.byteindex_224
        uint8_t byteindex_225;//0xe1//x_D41A0_BYTEARRAY_4_struct.byteindex_225
        uint8_t* pointer_0xE2_heapbuffer_226;//x_D41A0_BYTEARRAY_4_struct.pointer_0xE2_heapbuffer_226
        uint32_t dword_0xE6_heapsize_230;//x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230
        uint8_t stubr[8];
        type_index_242ar str_index_242ar;//0xf2//x_D41A0_BYTEARRAY_4_struct.byteindex_242ar
                                         //uint8_t byteindex_246;//0xf6//x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[4]
                                         //uint8_t byteindex_250;//x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[8]

        type_str_0x2BDE byteindex_256ar;//0x100//x_D41A0_BYTEARRAY_4_struct.byteindex_256ar
                                        //280=byteindex_256ar[24];//x_D41A0_BYTEARRAY_4_struct.byteindex_256ar[24]
                                        //565=byteindex_256ar[309];//0x235//x_D41A0_BYTEARRAY_4_struct.byteindex_256ar[309]
                                        //1865=byteindex_256ar[1609];//0x749//x_D41A0_BYTEARRAY_4_struct.byteindex_256ar[1609]
                                        //end 2224

        //uint8_t byteindex_2255ar[26];//0x100//x_D41A0_BYTEARRAY_4_struct.byteindex_2255ar
        //type_2255ar str_2255ar;
        //end 2281
        //uint8_t stubs[9];
        uint32_t dwordindex_2380;//0x94c//x_D41A0_BYTEARRAY_4_struct.dwordindex_2380
        uint8_t stubt[4];
        uint32_t dwordindex_2388;//0x954//x_D41A0_BYTEARRAY_4_struct.dwordindex_2388
        uint32_t dwordindex_2392;//0x958//x_D41A0_BYTEARRAY_4_struct.dwordindex_2392

        //uint8_t byteindex_8618;//0x21aa//x_D41A0_BYTEARRAY_4_struct.byteindex_8618
        //uint8_t setting_38545;
        uint8_t stubu[36000];
        type_event_0x6E8E* dwordindex_38396;//0x95FC//x_D41A0_BYTEARRAY_4_struct.dwordindex_38396
        uint8_t byteindex_38400;//0x9600//x_D41A0_BYTEARRAY_4_struct.byteindex_38400
        uint8_t byteindex_38401;//0x9601//x_D41A0_BYTEARRAY_4_struct.byteindex_38401

        uint8_t setting_38402;//0x9602//x_D41A0_BYTEARRAY_4_struct.setting_38402

        type_event_0x6E8E* bytearray_38403x[30];//array 116//0x9603//x_D41A0_BYTEARRAY_4_struct.bytearray_38403
        //bytearray_38419=bytearray_38403[16]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[16]
        //bytearray_38439=bytearray_38403[36]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[36]
        //bytearray_38403[88]//uint32_t dword_38491;//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[88]

        //bytearray_38451=bytearray_38403[48]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[48]
        //bytearray_38455=bytearray_38403[52]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[52]

        //bytearray_38511=bytearray_38403[108]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[108]
        //bytearray_38515=bytearray_38403[112]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[112]

        //bytearray_38535=bytearray_38403[132]//0x965b//x_D41A0_BYTEARRAY_4_struct.bytearray_38403[132]

        //endarray - dword_38519
        type_event_0x6E8E* dword_38519;//0x9677//x_D41A0_BYTEARRAY_4_struct.dword_38519

        type_event_0x6E8E* dword_38523;//0x967b//x_D41A0_BYTEARRAY_4_struct.dword_38523
        type_event_0x6E8E* dword_38527;//0x967F//x_D41A0_BYTEARRAY_4_struct.dword_38527
        type_event_0x6E8E* dword_38531;//0x9683//x_D41A0_BYTEARRAY_4_struct.dword_38531
        type_event_0x6E8E* dword_38535;//x_D41A0_BYTEARRAY_4_struct.dword_38535
        uint8_t stubv[5];
        uint8_t byte_38544;//x_D41A0_BYTEARRAY_4_struct.byte_38544
        uint8_t setting_38545;//0x9691//x_D41A0_BYTEARRAY_4_struct.setting_38545
        uint8_t SelectedMenuItem_38546;//0x9692//x_D41A0_BYTEARRAY_4_struct.byte_38546
        uint8_t stubw[44];
        uint8_t byte_38591;//0x96BF//x_D41A0_BYTEARRAY_4_struct.byte_38591

        //uint32_t dword_616432;*/
    };

    type_x_D41A0_BYTEARRAY_4_struct x_D41A0_BYTEARRAY_4_struct;

    public enum MapType_t : byte
    {
        Day = 0,
        Night = 1,
        Cave = 2
    }

struct type_entity_0x30311
    {//lenght 20
    //uint8_t byte_0;//type_str_0x30310//type_str_0x30324
    int type_0x30311;//type_str_0x30311//type_str_0x30325//1091
                          //uint8_t byte_1;//type_str_0x30312//type_str_0x30326
    int subtype_0x30311;//type_str_0x30313//type_str_0x30327//1091
                            //uint8_t byte_4;//type_str_0x30314//type_str_0x30328
                            //axis_3d axis3d_4;//type_str_0x30315//type_str_0x30329
    axis_2du axis2d_4;
    int DisId;// must be signed
                  //uint8_t byte_5;//type_str_0x30316//type_str_0x3032a
                  //uint16_t word_6;//type_str_0x30317//type_str_0x3032b
                  //uint8_t byte_7;//type_str_0x30318//type_str_0x3032c
                  //uint16_t word_8;//type_str_0x30319//type_str_0x3032d
    int word_10;//type_str_0x3031b//type_str_0x3032f
                     //uint8_t byte_11;//type_str_0x3031c//type_str_0x30330
    int stageTag_12;//type_str_0x3031d//type_str_0x30331
                        //uint8_t byte_13;//type_str_0x3031e//type_str_0x30332
    int par1_14;//type_str_0x3031f//type_str_0x30333//1105
                     //uint8_t byte_15;//type_str_0x30320//type_str_0x30334
    int par2_16;//type_str_0x30321//type_str_0x30335
                     //uint8_t byte_17;//type_str_0x30322//type_str_0x30336
    int par3_18;//type_str_0x30323//type_str_0x30337
                     //uint8_t byte_19;//type_str_0x30324//type_str_0x30338
};

struct type_str_0x360D2
{//lenght 110 //word_0x360D2
    int word_0x360D5;
    int word_0x360D9;
    int word_0x360DD;
    int[] byte_0x360E1x;
    int[] byte_0x360FBx;
    int[] byte_0x36115x;
    int word_0x3612F;
}

struct type_str_2FECE
{//lenght 0x6604u
    int word_2FECE;
    int word_2FED0;
    int byte_0x2FED2;//x_D41A0_BYTEARRAY_0[196306] // type of level graphics
    int byte_0x2FED3;
    MapType_t MapType;//x_D41A0_BYTEARRAY_0[196308]//GraphicsType
    int word_0x2FED5;
    int word_0x2FED7;
    int[] player_0x2FED9;
    int seed_0x2FEE5;//2FEE5//23
    int offset_0x2FEE9;//2FEE9//27 //first seed position
    int raise_0x2FEED;//2FEED//31 //first seed height
    int gnarl_0x2FEF1;//2FEF1//35 //random seed
    int river_0x2FEF5;//2FEF5//39
    int lriver_0x2FEF9;//2FEF9//43
    int source_0x2FEFD;//2FEFD//47
    int snLin_0x2FF01;//2FF01//51
    int snFlt_0x2FF05;//2FF05//55
    int bhLin_0x2FF09;//2FF09//59
    int bhFlt_0x2FF0D;//2FF0D//63
    int rkSte_0x2FF11;//2FF11//67
    type_entity_0x30311[] entity_0x30311;//end(next entity) - 0x360d1
    int next_0x360D1;
    type_str_0x360D2[] next_0x360D2;//lenght 110  /spells?
    type_str_0x36442[] stages_0x36442;//stages(checkpoints)
    type_str_0x3647Ac[] StageVars_0x3647A;//8x11
};//compress level

//----- (000533B0) --------------------------------------------------------
char sub_533B0_decompress_levels(int a1, type_str_2FECE[] a2x)//2343b0
    {
        uint8_t* v2; // edi
        FILE* levelsdatfile; // ebx
        FILE* levelstabfile; // esi
        int* v6; // eax
        int v7; // edi
                //char v8; // [esp+0h] [ebp-44h]
        int v9; // [esp+40h] [ebp-4h]

        v2 = (uint8_t*)x_DWORD_E9C38_smalltit;
        if (a1 < 1000)
        {
            std::string levelDataPath = GetSubDirectoryFile(gameFolder, "CLEVELS", "LEVELS.DAT");
            levelsdatfile = DataFileIO::CreateOrOpenFile(levelDataPath.c_str(), 512);
            if (levelsdatfile == NULL)
            {
                levelDataPath = GetSubDirectoryFile(cdFolder, "LEVELS", "LEVELS.DAT");
                levelsdatfile = DataFileIO::CreateOrOpenFile(levelDataPath.c_str(), 512);
                if (levelsdatfile == NULL)
                    return 0;
            }
            levelDataPath = GetSubDirectoryFile(gameFolder, "CLEVELS", "LEVELS.TAB");
            levelstabfile = DataFileIO::CreateOrOpenFile(levelDataPath.c_str(), 512);
            if (levelstabfile == NULL)
            {
                levelDataPath = GetSubDirectoryFile(cdFolder, "LEVELS", "LEVELS.TAB");
                levelstabfile = DataFileIO::CreateOrOpenFile(levelDataPath.c_str(), 512);
                if (levelstabfile == NULL)
                {
                    DataFileIO::Close(levelsdatfile);
                    return 0;
                }
            }
            DataFileIO::Read(levelstabfile, v2, 4000);
            v6 = (int*)(v2 + 4 * a1);
            v7 = v6[0];
            v9 = v6[1] - v6[0];
            DataFileIO::Close(levelstabfile);

            if (DataFileIO::FileLengthBytes(levelsdatfile))
            {
                DataFileIO::Seek(levelsdatfile, v7, 0);
                DataFileIO::Read(levelsdatfile, (uint8_t*)x_DWORD_E9C38_smalltit, v9);
                if (DataFileIO::Decompress((uint8_t*)x_DWORD_E9C38_smalltit, (uint8_t*)x_DWORD_E9C38_smalltit) < 0)
                {
                    myprintf("ERROR decompressing LEVELS.DAT\n");
                    return 0;
                }
                /*
                qmemcpy(a2x, (type_str_2FECE*)(const void*)x_DWORD_E9C38_smalltit, sizeof(type_str_2FECE));//0x6604
                memset((type_str_2FECE*)x_DWORD_E9C38_smalltit, 0, sizeof(type_str_2FECE));//0x6604
                */
                type_shadow_str_2FECE shadow_a2x;
                qmemcpy(&shadow_a2x, (type_shadow_str_2FECE*)(const void*)x_DWORD_E9C38_smalltit, sizeof(type_shadow_str_2FECE));//0x6604
                memset((type_shadow_str_2FECE*)x_DWORD_E9C38_smalltit, 0, sizeof(type_shadow_str_2FECE));//0x6604
                Convert_from_shadow_str_2FECE(&shadow_a2x, a2x);
                //type_shadow_str_2FECE
            }
            DataFileIO::Close(levelsdatfile);

            //if exist editor generated level
#if !defined(IS_EDITOR)
            if (CommandLineParams.DoLoadEditedLevel())
            {
                if (config_LOAD_EDITED_LEVEL)
                {
                    char path2[512];
                    FixDir(path2, (char*)"../remc2/editor/Debug/testsave.sav");
                    FILE* file = fopen(path2, "rb");
                    if (file)
                    {
                        type_shadow_str_2FECE shadow_2FECE;
                        fread(&shadow_2FECE, sizeof(type_shadow_str_2FECE), 1, file);
                        /*for (int i = 0; i < sizeof(type_shadow_str_2FECE); i++)
							if(((int8_t*)&shadow_2FECE)[i]!=((int8_t*)&D41A0_BYTESTR_0.terrain_2FECE)[i])
								allert_error();*/
                        Convert_from_shadow_str_2FECE(&shadow_2FECE, &D41A0_0.terrain_2FECE);
                    }
                    fclose(file);
                }
            }
#endif //!IS_EDITOR
            //if exist editor generated level

            sub_56C00_sound_proc2(a2x);
            sub_53590(a2x);
        }
        return 1;
    }

    void sub_56A30_init_game_level(int a1)//237a30
    {
        //CreateIndexes_6EB90(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);//24fb90 adress 0x23ca2e
        //ClearSettings_567C0();
        sub_533B0_decompress_levels(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w, &D41A0_0.terrain_2FECE);        
        
        /*if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
            D41A0_0.word_0xe = D41A0_0.terrain_2FECE.word_0x2FED7;
        PrintTextMessage_70910((char*)"Generate map\0");
        if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
            GenerateLevelMap_43830(&D41A0_0.terrain_2FECE);
        sub_49F30();//prepare events pointers
                    //237B05
        if (CommandLineParams.DoDebugSequences())
        {
            add_compare(0x237B05, CommandLineParams.DoDebugafterload());
        }
        PrintTextMessage_70910((char*)"Generate features\0");
        if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
            sub_49270_generate_level_features(&D41A0_0.terrain_2FECE);
        PrintTextMessage_70910((char*)"Initialise Models\0");
        memset(&x_WORD_EB398ar, 0, 6);
        sub_49F90();
        //adress 237B55
        if (CommandLineParams.DoDebugSequences())
        {
            add_compare(0x237B55, CommandLineParams.DoDebugafterload());
        }
        D41A0_0.dword_0x11e6 = -1;
        sub_71A70_setTmaps(D41A0_0.terrain_2FECE.MapType);
        //adress 237b75
        if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
        {
            InitStages_58940();
            InitStageVars_11EE0();
            Init0x3664C_84790();
        }
        //adress 237BB0
        if (CommandLineParams.DoDebugSequences())
        {
            add_compare(0x237BB0, CommandLineParams.DoDebugafterload());
        }
        if (CommandLineParams.DoSetObjective())
        {
            // FIXME: D41A0_BYTESTR_0 undeclared
            // D41A0_BYTESTR_0.struct_0x3659C[0].substr_3659C.stage_0x3659F[0] = 2;
            // D41A0_BYTESTR_0.struct_0x3659C[0].substr_3659C.stage_0x3659F[1] = 2;
            // D41A0_BYTESTR_0.struct_0x3659C[0].substr_3659C.stage_0x3659F[2] = 2;
            // D41A0_BYTESTR_0.struct_0x3659C[0].substr_3659C.stage_0x3659F[3] = 2;
            // //D41A0_BYTESTR_0.struct_0x3659C[0].substr_3659C.stage_0x3659F[4] = 2;
            // D41A0_BYTESTR_0.struct_0x3659C[0].substr_3659C.array_0x3659C_byte[1] = 4;
            // //D41A0_BYTESTR_0.struct_0x3654C[0].str_3654E_word2 = 40;
            // //D41A0_BYTESTR_0.struct_0x3654C[0].str_36550_word4 = 40;
        }
        sub_4A1E0(0, 1);
        //adress 237bb9
        if (CommandLineParams.DoDebugSequences())
        {
            add_compare(0x237bb9, CommandLineParams.DoDebugafterload());
        }
        soundActive_E3799 = temp_x_BYTE_E3799_sound_card;
        sub_53160();
        //adress 237bc7
        if (CommandLineParams.DoDebugSequences())
        {
            add_compare(0x237BC7, CommandLineParams.DoDebugafterload());
        }
        //adress 237beb
        sub_60F00();
        if (CommandLineParams.DoDebugSequences())
        {
            add_compare(0x237BF0, CommandLineParams.DoDebugafterload());
        }*/
    }

    public override void _Ready()
    {
        sub_56A30_init_game_level(0);
        gen_mesh();
    }

    // Called every frame. 'delta' is the elapsed time since the previous frame.
    public override void _Process(double delta)
    {
        if (update)
        {
            sub_56A30_init_game_level(0);
            gen_mesh();
            update = true;
        }
    }

    private Color heightToColor(float height)
    {

        //get color
        int colorsCount = heightsColors.Length;
        float value = Mathf.InverseLerp(minColorHeight, maxColorHeight, height);
        int indexColor = Mathf.Clamp(Mathf.RoundToInt(Mathf.Lerp(0, colorsCount - 1, value)), 0, colorsCount - 1);

        return heightsColors[indexColor];
    }

    private void gen_mesh()
    {
        var rand = new Random();
        ArrayMesh a_mesh = new ArrayMesh();

        SurfaceTool st = new SurfaceTool();

        int terrainSizeX = 8;
        int terrainSizeY = 19;

        float terrainSizeXParc = 1 / (float)terrainSizeX;
        float terrainSizeYParc = 1 / (float)terrainSizeY;
        /*
        Vector3 v1 = new Vector3(0, 0, 0);
        Vector3 v2 = new Vector3(1, 0, 0);
        Vector3 v3 = new Vector3(1, 0, 1);

        //tri1
        st.SetUV(new Vector2(0, 0));
        st.SetColor(heightToColor(v1.Y));// active albedoVertexColors on material
        st.AddVertex(v1);


        st.SetUV(new Vector2(0, 1));
        st.SetColor(heightToColor(v2.Y));
        st.AddVertex(v2);


        st.SetUV(new Vector2(1, 1));
        st.SetColor(heightToColor(v3.Y));
        st.AddVertex(v3);

        st.GenerateNormals();
        st.Commit(a_mesh);
        this.Mesh = a_mesh;*/

        //PhysicsRayQueryParameters3D p = new PhysicsRayQueryParameters3D();
        //var result = spaceState.IntersectRay(p);

        a_mesh.ClearSurfaces();
        st.Clear();

        st.Begin(Mesh.PrimitiveType.Triangles);

        const int textColumns = 50;
        const int textRows = 50;

        //float[,] floatArray = new float[textColumns, textRows];



        type_E9C38_smalltit[] Str_E9C38_smalltit = new type_E9C38_smalltit[textColumns * textRows];
        Byte[,] mapHeightmap_11B4E0 = new Byte[0x100, 0x100];
        Byte[] mapAngle_FC1E0_FC1D0 = new Byte[0x10000]; // weak
        Byte[] mapShading_EC1E0_EC1D0 = new Byte[0x10000]; // weak
        Byte[] mapTerrainType_CC1E0_CC1D0 = new Byte[0x10000]; // 0x28A1E0_
        short[] mapEntityIndex_10C1E0_10C1D0 = new short[0x10000]; // weak

        type_F2C20ar str_F2C20ar;
        str_F2C20ar.dword0x15 = 0;//fix
        str_F2C20ar.dword0x18 = 0;//fix

        for (int i = 0; i < textColumns; i++)
            for (int j = 0; j < textRows; j++)
                mapHeightmap_11B4E0[i, j] = (Byte)(rand.NextDouble() * 0x100);

        int index = 0;
        //int dword_B5D00_B5CF0 = 0;//fix it
        //int fowDist_B5D14_B5D04 = 0;//fix it
        int dword_B5CF0_B5CE0 = 0;//fix it
        int dword_B5D0C_B5CFC = 0;//fix it
        int dword_B5CFC_B5CEC = 0;//fix it
        int dword_B5CEC_B5CDC = 0;//fix it
        uaxis_2d yawXY;
        yawXY.word = 0;//fix
        byte[,] yawQuartal_D4328 = new byte[4, 10] {
            { 0xED, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xD8, 0xFF, 0x01, 0x00 },
            { 0x00, 0xED, 0xFF, 0x00, 0x01, 0x00, 0x01, 0xD8, 0x00, 0x01 },
            { 0x13, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0x28, 0x01, 0xFF, 0x00 },
            { 0x01, 0x13, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x28, 0x00, 0xFF }
        };
        int yaw = 0;//fix it
        int tempYaw = (yaw & 0x7FF) + 256;
        int modYaw = (tempYaw >> 9) & 3;

        byte[] yawQuartal = new byte[10];
        for (int i = 0; i < 10; i++)
        {
            yawQuartal[i] = yawQuartal_D4328[modYaw, i];
        }

        int posX = 0;//fix it
        int posY = 0;//fix it
        int posZ = 0;//fix it
        uaxis_2d uPosX;
        uaxis_2d uPosY;
        uPosX._axis_2d.y = 0;//fix
        uPosY._axis_2d.y = 0;//fix

        uPosX.word = (ushort)posX;
        uPosY.word = (ushort)posY;

        yawXY._axis_2d.x = (Byte)(yawQuartal[0] + uPosX._axis_2d.y);
        yawXY._axis_2d.y = (Byte)(yawQuartal[1] + uPosY._axis_2d.y);

        //str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18
        //fix it
        int str_AE400_AE3F0_str_13323_str_AE400_AE3F0_var_u16_8_var_u32_13341_18 = 0;
        //fix it

        int tempDiameter = str_AE400_AE3F0_str_13323_str_AE400_AE3F0_var_u16_8_var_u32_13341_18 << 6;
        int tempSinDiaY = (int)sin_90B4C[((yawXY._axis_2d.y << 7) + tempDiameter) & 0x7FF] >> 8;
        int tempSinDiaX = (int)sin_90B4C[((yawXY._axis_2d.x << 7) + tempDiameter) & 0x7FF] >> 8;
        for (int i = 0; i < textColumns - 1; i++)
        {
            for (int j = 0; j < textRows - 1; j++)
            {
                //for (v238 = textColumns; v238; v238--)
                //for (v243 = textRows; v243; v243--)
                //{
                //for (v243 = textRows; v243; v243--)
                //{
                int powX = (int)Math.Pow(Str_E9C38_smalltit[index].x_0, 2);
                int tempY = Str_E9C38_smalltit[index].y_12;
                int powY = (int)Math.Pow(tempY, 2);
                Str_E9C38_smalltit[index].haveBillboard_36 = 0;
                if (tempY > -256 && powY + powX < str_F2C20ar.dword0x15)
                {
                    if (tempY < 128)
                        tempY = 128;
                    Str_E9C38_smalltit[index].pnt1_16 = str_F2C20ar.dword0x18 * Str_E9C38_smalltit[index].x_0 / tempY;
                    Str_E9C38_smalltit[index].alt_4 = 32 * mapHeightmap_11B4E0[yawXY._axis_2d.y, yawXY._axis_2d.x] - posZ;
                    tempSinDiaY = (int)sin_90B4C[((str_AE400_AE3F0_str_13323_str_AE400_AE3F0_var_u16_8_var_u32_13341_18 << 6) + (yawXY._axis_2d.y << 7)) & 0x7FF] >> 8;
                    int tempSinXSin = (int)Math.Pow(tempSinDiaY, 2);
                    if ((mapAngle_FC1E0_FC1D0[yawXY.word] & 8) != 0)
                        Str_E9C38_smalltit[index].alt_4 -= tempSinXSin >> 10;
                    else
                        tempSinXSin = 0;
                    int tempVar32 = (((mapShading_EC1E0_EC1D0[yawXY.word] << 8) + 128) << 8) + 8 * tempSinXSin;
                    if (powY + powX > dword_B5CF0_B5CE0)
                    {
                        if (powY + powX >= dword_B5D0C_B5CFC)
                            Str_E9C38_smalltit[index].pnt5_32 = 0;
                        else
                            Str_E9C38_smalltit[index].pnt5_32 = tempVar32 * /*(__int64)*/(dword_B5D0C_B5CFC - (powY + powX)) / dword_B5CEC_B5CDC;
                    }
                    else
                        Str_E9C38_smalltit[index].pnt5_32 = tempVar32;
                    Str_E9C38_smalltit[index].pnt2_20 = dword_B5CFC_B5CEC + str_F2C20ar.dword0x18 * Str_E9C38_smalltit[index].alt_4 / tempY;
                    uaxis_2d tempYawXY = yawXY;
                    tempYawXY._axis_2d.x += yawQuartal[2];
                    tempYawXY._axis_2d.y += yawQuartal[3];
                    Str_E9C38_smalltit[index].textIndex_41 = mapTerrainType_CC1E0_CC1D0[tempYawXY.word];
                    Str_E9C38_smalltit[index].textAtyp_43 = byte_900C4[Str_E9C38_smalltit[index].textIndex_41] != 0;
                    Str_E9C38_smalltit[index].textUV_42 = (sbyte)(modYaw + ((mapAngle_FC1E0_FC1D0[tempYawXY.word] >> 2) & 0x1C));
                    tempYawXY._axis_2d.x += yawQuartal[4];
                    tempYawXY._axis_2d.y += yawQuartal[5];
                    Str_E9C38_smalltit[index].haveBillboard_36 = (short)mapEntityIndex_10C1E0_10C1D0[tempYawXY.word];
                }
                else
                    Str_E9C38_smalltit[index].triangleFeatures_38 |= 0x2;
                Str_E9C38_smalltit[index].triangleFeatures_38 |= (ushort)((yawXY._axis_2d.x + yawXY._axis_2d.y) & 1);
                yawXY._axis_2d.x += yawQuartal[8];
                yawXY._axis_2d.y += yawQuartal[9];
                //}
                //}

                Random random = new Random();
                int tileIndexX = mapTerrainType_CC1E0_CC1D0[i + j * 256] % terrainSizeX;//;random.Next(0, 11);
                int tileIndexY = mapTerrainType_CC1E0_CC1D0[i + j * 256] / terrainSizeX;//;random.Next(0, 11);

                if ((Str_E9C38_smalltit[index].triangleFeatures_38 & 1) == 0)
                {
                    Vector3 v1x = new Vector3(i + 0, 0.003f * mapHeightmap_11B4E0[i + 0, j + 0], j + 0);
                    Vector3 v2x = new Vector3(i + 1, 0.003f * mapHeightmap_11B4E0[i + 1, j + 0], j + 0);
                    Vector3 v3x = new Vector3(i + 1, 0.003f * mapHeightmap_11B4E0[i + 1, j + 1], j + 1);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * tileIndexY));
                    st.AddVertex(v1x);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v2x);

                    st.SetUV(new Vector2(terrainSizeXParc * (tileIndexX + 1), terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v3x);

                    Vector3 v1y = new Vector3(i + 0, 0.003f * mapHeightmap_11B4E0[i + 0, j + 0], j + 0);
                    Vector3 v2y = new Vector3(i + 1, 0.003f * mapHeightmap_11B4E0[i + 1, j + 1], j + 1);
                    Vector3 v3y = new Vector3(i + 0, 0.003f * mapHeightmap_11B4E0[i + 0, j + 1], j + 1);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * tileIndexY));
                    st.AddVertex(v1y);

                    st.SetUV(new Vector2(terrainSizeXParc * (tileIndexX + 1), terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v2y);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v3y);
                }
                else
                {
                    Vector3 v1x = new Vector3(i + 1, 0.003f * mapHeightmap_11B4E0[i + 1, j + 0], j + 0);
                    Vector3 v2x = new Vector3(i + 0, 0.003f * mapHeightmap_11B4E0[i + 0, j + 1], j + 1);
                    Vector3 v3x = new Vector3(i + 0, 0.003f * mapHeightmap_11B4E0[i + 0, j + 0], j + 0);

                    st.SetUV(new Vector2(terrainSizeXParc * (tileIndexX + 1), terrainSizeYParc * tileIndexY));
                    st.AddVertex(v1x);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v2x);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * tileIndexY));
                    st.AddVertex(v3x);

                    Vector3 v1y = new Vector3(i + 1, 0.003f * mapHeightmap_11B4E0[i + 1, j + 0], j + 0);
                    Vector3 v2y = new Vector3(i + 1, 0.003f * mapHeightmap_11B4E0[i + 1, j + 1], j + 1);
                    Vector3 v3y = new Vector3(i + 0, 0.003f * mapHeightmap_11B4E0[i + 0, j + 1], j + 1);

                    st.SetUV(new Vector2(terrainSizeXParc * (tileIndexX + 1), terrainSizeYParc * tileIndexY));
                    st.AddVertex(v1y);

                    st.SetUV(new Vector2(terrainSizeXParc * (tileIndexX + 1), terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v2y);

                    st.SetUV(new Vector2(terrainSizeXParc * tileIndexX, terrainSizeYParc * (tileIndexY + 1)));
                    st.AddVertex(v3y);
                }
                index++;
            }
            yawXY._axis_2d.x += yawQuartal[6];
            yawXY._axis_2d.y += yawQuartal[7];
        }

        //begin
        Vector3 v1 = new Vector3(0, 0, 0);
        Vector3 v2 = new Vector3(1, 0, 0);
        Vector3 v3 = new Vector3(1, 0, 1);

        st.SetUV(new Vector2(0, 0));
        st.AddVertex(v1);

        st.SetUV(new Vector2(0, 1));
        st.AddVertex(v2);

        st.SetUV(new Vector2(1, 1));
        st.AddVertex(v3);
        //end

        st.Commit(a_mesh);

        //add texture
        //Texture2D icon = (Texture2D)ResourceLoader.Load("res://icon.png");
        //Texture2D icon = ResourceLoader.Load("res://icon.png") as Texture2D;
        Texture2D icon = ResourceLoader.Load("res://art/bl32c0-0.png") as Texture2D;
        var material = new StandardMaterial3D();
        material.AlbedoTexture = icon;
        a_mesh.SurfaceSetMaterial(0, material);

        this.Mesh = a_mesh;
    }
}
